
--- Fichier : .gitignore ---

# Project exclude paths
/.gradle/
/build/
/core/build/
*.hprof
/.idea/
/mobile/build/generated/
/mobile/build/intermediates/
/mobile/build/kotlin/
/mobile/build/kotlinToolingMetadata/
/mobile/build/outputs/logs/
/mobile/build/outputs/sdk-dependencies/
/mobile/build/tmp/


--- Fichier : build.gradle ---

buildscript {
    ext {
        agp_version = '8.12.1'
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$agp_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:2.1.21"
        classpath 'org.jetbrains.kotlin:compose-compiler-gradle-plugin:2.1.21'
    }
}




--- Fichier : changelog.md ---

# Changelog â€” PSA Immo Tool

## âœ… Version figÃ©e (stable)

Cette version est marquÃ©e comme **immuable**, base de dÃ©veloppement propre et fonctionnelle.

---

### âœ… Noyau fonctionnel

- Support complet des modules :
  - CANBUS (USB sÃ©rie)
  - OBD2 USB (FTDI)
  - OBD2 Bluetooth (ELM327)
  - K-Line USB
- Lecture VIN (tous modules), lecture PIN (CAN)
- Ã‰coute temps rÃ©el des trames CAN
- Envoi de trames personnalisÃ©es CAN & K-Line
- Gestion de logs : export `.txt`, nettoyage, affichage live
- Fichier `LogExporter.kt` ajoutÃ©
- UI responsive pour Ã©cran portrait/paysage

---

### ðŸŒ Multilingue complet

- Tous les textes d'interface traduits (FR + EN)
- Messages dâ€™erreurs, logs, boutons, menus, dÃ©codage dynamique multilingue
- Menu avec bascule instantanÃ©e entre FranÃ§ais ðŸ‡«ðŸ‡· et Anglais ðŸ‡¬ðŸ‡§
- Ressources centralisÃ©es dans :
  - `strings.xml`
  - `strings-en.xml`

---

### ðŸ› ï¸ Optimisations techniques

- Utilisation correcte de `ContextProvider.appContext` dans tous les modules
- Suppression des warnings Kotlin :
  - `Unresolved reference: get`
  - `invoke() is not found`
  - `Variable declaration could be moved into 'when'`
  - `StringFormatInvalid`
- Ajout de `@SuppressLint("StringFormatInvalid")` lorsque pertinent
- Optimisation de la portÃ©e des variables locales dans `when`

---

### ðŸ” Permissions

- Gestion dynamique :
  - `ACCESS_FINE_LOCATION`
  - `BLUETOOTH_CONNECT`
  - USB permission via `UsbManager`
- CompatibilitÃ© assurÃ©e entre Android 9 (API 28) et Android 14 (API 34+)

---

### ðŸ§  DÃ©codage CAN

- Module `FrameDecoder.kt` robuste :
  - Trames VIN (`09 02`)
  - Trames PIN IMMO (`22 F1 90`)
  - PID OBD2 : RPM (`0C`), tempÃ©rature moteur (`05`)
  - Trames PSAR (`FD`) :
    - Commandes volant (Volume, Sourceâ€¦)
    - TempÃ©rature de consigne clim
- Structure lisible et traduisible dans tous les cas dâ€™erreur ou valeur

---

## ðŸ§Š Version figÃ©e

Cette version est considÃ©rÃ©e comme **propre, testÃ©e, figÃ©e**, utilisÃ©e comme socle pour toute future extension :
- Ajout de nouveaux modules
- Extension du dÃ©codage
- AmÃ©lioration graphique

---

--- Fichier : extractall.ps1 ---

# RÃ©pertoire courant
$currentDir = Get-Location

# Fichier de sortie unique
$outputFile = Join-Path $currentDir "project_content.txt"

# Liste des extensions de fichiers Ã  exclure
$excludedExtensions = @(".png", ".jpg", ".jpeg", ".gif", ".bmp", ".ico", ".jar", ".apk",".dm",".webp")

# Supprimer le fichier de sortie s'il existe dÃ©jÃ 
if (Test-Path $outputFile) {
    Remove-Item $outputFile -Force
}

# RÃ©cupÃ©rer tous les fichiers Ã  inclure
$filesToInclude = Get-ChildItem -Recurse -File `
  | Where-Object {
    $_.FullName -notmatch '\\\.git\\' -and
            $_.FullName -notmatch '\\\.gradle\\' -and
            $_.FullName -notmatch '\\build\\' -and
            $_.FullName -notmatch '\\\.idea\\' -and
            $excludedExtensions -notcontains $_.Extension
}

# Ã‰crire le contenu de chaque fichier dans le fichier de sortie
foreach ($file in $filesToInclude) {
    # Chemin relatif du fichier
    $relativePath = $file.FullName.Replace($currentDir.Path + "\", "")

    # SÃ©parateur pour chaque fichier
    Add-Content -Path $outputFile -Value "`n--- Fichier : $relativePath ---`n" -Encoding UTF8

    # Contenu du fichier
    Get-Content -Path $file.FullName | Add-Content -Path $outputFile -Encoding UTF8
}

Write-Host "âœ… Contenu du projet exportÃ© dans : $outputFile"

--- Fichier : filelisting.ps1 ---

# RÃ©pertoire courant et parent
$currentDir = Get-Location
$parentDir  = Split-Path $currentDir -Parent

# Fichiers de sortie
$listFile = Join-Path $currentDir "file_list.txt"
$zipPath  = Join-Path $parentDir "project_sources.zip"

# RÃ©cupÃ©rer tous les fichiers sauf ceux exclus
$files = Get-ChildItem -Recurse -File `
  | Where-Object {
      $_.FullName -notmatch '\\\.git\\' -and
      $_.FullName -notmatch '\\\.gradle\\' -and
      $_.FullName -notmatch '\\build\\' -and
      $_.FullName -notmatch '\\\.idea\\'
    }

# Sauvegarder la liste relative des fichiers
$files | ForEach-Object {
    $_.FullName.Replace($currentDir.Path + "\", "")
} | Sort-Object | Out-File -FilePath $listFile -Encoding UTF8

# Supprimer lâ€™archive si elle existe dÃ©jÃ 
if (Test-Path $zipPath) {
    Remove-Item $zipPath -Force
}

# CrÃ©er lâ€™archive ZIP avec la structure relative
Compress-Archive -Path $files.FullName -DestinationPath $zipPath

Write-Host "âœ… Archive crÃ©Ã©e : $zipPath"
Write-Host "âœ… Liste des fichiers sauvegardÃ©e dans : $listFile"

--- Fichier : file_list.txt ---

.gitignore
automotive\build.gradle
automotive\consumer-rules.pro
automotive\proguard-rules.pro
automotive\src\main\AndroidManifest.xml
automotive\src\main\java\com\helly\psaimmotool\automotive\CarService.kt
automotive\src\main\java\com\helly\psaimmotool\automotive\MainScreen.kt
automotive\src\main\java\com\helly\psaimmotool\automotive\MainSession.kt
automotive\src\main\res\xml\automotive_app_desc.xml
build.gradle
changelog.md
core\build.gradle
core\src\main\java\com\helly\psaimmotool\can\CanCommunicationInterface.kt
core\src\main\java\com\helly\psaimmotool\can\CanFrame.kt
core\src\main\java\com\helly\psaimmotool\can\UsbCanInterface.kt
core\src\main\java\com\helly\psaimmotool\modules\BaseModule.kt
core\src\main\java\com\helly\psaimmotool\modules\CanBusModule.kt
core\src\main\java\com\helly\psaimmotool\modules\CanBusUartModule.kt
core\src\main\java\com\helly\psaimmotool\modules\GenericCanDemoModule.kt
core\src\main\java\com\helly\psaimmotool\modules\KLineUsbModule.kt
core\src\main\java\com\helly\psaimmotool\modules\Obd2BluetoothModule.kt
core\src\main\java\com\helly\psaimmotool\modules\Obd2UsbModule.kt
core\src\main\java\com\helly\psaimmotool\modules\PSAKeyCalculator.kt
core\src\main\java\com\helly\psaimmotool\ports\StatusPort.kt
core\src\main\java\com\helly\psaimmotool\utils\ContextProvider.kt
core\src\main\java\com\helly\psaimmotool\utils\DiagnosticRecorder.kt
core\src\main\java\com\helly\psaimmotool\utils\FrameInterpreter.kt
core\src\main\java\com\helly\psaimmotool\utils\LocaleUtils.kt
core\src\main\java\com\helly\psaimmotool\utils\LogExporter.kt
core\src\main\java\com\helly\psaimmotool\utils\PermissionUtils.kt
core\src\main\java\com\helly\psaimmotool\utils\Prefs.kt
core\src\main\java\com\helly\psaimmotool\utils\ReportGenerator.kt
core\src\main\java\com\helly\psaimmotool\utils\VehicleCapabilities.kt
core\src\main\java\com\helly\psaimmotool\utils\VehicleCapabilitiesEditor.kt
core\src\main\java\com\helly\psaimmotool\utils\VehicleManager.kt
file_list.txt
filelisting.ps1
gradle.properties
gradle\wrapper\gradle-wrapper.jar
gradle\wrapper\gradle-wrapper.properties
gradlew
gradlew.bat
local.properties
mobile\build.gradle
mobile\release\baselineProfiles\0\mobile-release.dm
mobile\release\baselineProfiles\1\mobile-release.dm
mobile\release\mobile-release.apk
mobile\release\output-metadata.json
mobile\src\main\AndroidManifest.xml
mobile\src\main\ic_launcher-playstore.png
mobile\src\main\java\com\helly\psaimmotool\ports\StatusPortImpl.kt
mobile\src\main\java\com\helly\psaimmotool\SettingsActivity.kt
mobile\src\main\java\com\helly\psaimmotool\SettingsFragment.kt
mobile\src\main\java\com\helly\psaimmotool\ui\DiagnosticsFragment.kt
mobile\src\main\java\com\helly\psaimmotool\update\UpdateManager.kt
mobile\src\main\java\com\helly\psaimmotool\utils\UiUpdater.kt
mobile\src\main\java\com\helly\psaimmotool\VehicleEditorActivity.kt
mobile\src\main\java\MainActivity.kt
mobile\src\main\res\drawable\ic_car.xml
mobile\src\main\res\drawable\ic_exit.xml
mobile\src\main\res\drawable\ic_launcher_background.xml
mobile\src\main\res\drawable\ic_module.xml
mobile\src\main\res\drawable\ic_settings.xml
mobile\src\main\res\layout\activity_main.xml
mobile\src\main\res\layout\activity_vehicle_editor.xml
mobile\src\main\res\layout\fragment_diagnostics.xml
mobile\src\main\res\layout\item_can_log.xml
mobile\src\main\res\layout-land\activity_main.xml
mobile\src\main\res\layout-land\activity_vehicle_editor.xml
mobile\src\main\res\layout-sw600dp\activity_main.xml
mobile\src\main\res\menu\menu_main.xml
mobile\src\main\res\mipmap-anydpi-v26\ic_launcher.xml
mobile\src\main\res\mipmap-anydpi-v26\ic_launcher_round.xml
mobile\src\main\res\mipmap-hdpi\ic_launcher.webp
mobile\src\main\res\mipmap-hdpi\ic_launcher_foreground.webp
mobile\src\main\res\mipmap-hdpi\ic_launcher_round.webp
mobile\src\main\res\mipmap-mdpi\ic_launcher.webp
mobile\src\main\res\mipmap-mdpi\ic_launcher_foreground.webp
mobile\src\main\res\mipmap-mdpi\ic_launcher_round.webp
mobile\src\main\res\mipmap-xhdpi\ic_launcher.webp
mobile\src\main\res\mipmap-xhdpi\ic_launcher_foreground.webp
mobile\src\main\res\mipmap-xhdpi\ic_launcher_round.webp
mobile\src\main\res\mipmap-xxhdpi\ic_launcher.webp
mobile\src\main\res\mipmap-xxhdpi\ic_launcher_foreground.webp
mobile\src\main\res\mipmap-xxhdpi\ic_launcher_round.webp
mobile\src\main\res\mipmap-xxxhdpi\ic_launcher.webp
mobile\src\main\res\mipmap-xxxhdpi\ic_launcher_foreground.webp
mobile\src\main\res\mipmap-xxxhdpi\ic_launcher_round.webp
mobile\src\main\res\values\arrays.xml
mobile\src\main\res\values\colors.xml
mobile\src\main\res\values\ic_launcher_background.xml
mobile\src\main\res\values\strings.xml
mobile\src\main\res\values\styles.xml
mobile\src\main\res\values\themes.xml
mobile\src\main\res\values-en\strings.xml
mobile\src\main\res\values-fr\strings.xml
mobile\src\main\res\values-night\colors.xml
mobile\src\main\res\values-night\themes.xml
mobile\src\main\res\xml\file_paths.xml
mobile\src\main\res\xml\prefs.xml
mobile\src\version.txt
mobile\version.properties
PSA_Immo_Tool_Carte.drawio
PSAIMMOTOOLREPORTS.MD
README.md
README-EN.md
settings.gradle

--- Fichier : gradle.properties ---

android.useAndroidX=true
kotlin.code.style=official

--- Fichier : gradlew ---

#!/bin/sh

#
# Copyright Â© 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions Â«$varÂ», Â«${var}Â», Â«${var:-default}Â», Â«${var+SET}Â»,
#           Â«${var#prefix}Â», Â«${var%suffix}Â», and Â«$( cmd )Â»;
#         * compound commands having a testable exit status, especially Â«caseÂ»;
#         * various built-in commands including Â«commandÂ», Â«setÂ», and Â«ulimitÂ».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

--- Fichier : gradlew.bat ---

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

--- Fichier : local.properties ---

## This file must *NOT* be checked into Version Control Systems,
# as it contains information specific to your local configuration.
#
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
#Thu May 22 09:40:47 CEST 2025
sdk.dir=C\:\\Users\\mickael.zerbib\\AppData\\Local\\Android\\Sdk

--- Fichier : PSAIMMOTOOLREPORTS.MD ---

# ðŸ“‹ Audit Complet â€“ PSA Immo Tool (Baseline Immobile)

## **1. RÃ©sumÃ© exÃ©cutif**

Cet audit est basÃ© **exclusivement** sur l'analyse des fichiers fournis dans la baseline.  
Aucune supposition ou extrapolation n'a Ã©tÃ© faite.  
Seuls les Ã©lÃ©ments rÃ©ellement prÃ©sents et identifiÃ©s comme **non utilisÃ©s** sont listÃ©s.

### **Constats principaux**
- Plusieurs **mÃ©thodes et classes Kotlin** existent mais ne sont **jamais appelÃ©es** dans le code.
- Des **ressources Android** (layouts, icÃ´nes, chaÃ®nes, arrays) sont prÃ©sentes mais **non rÃ©fÃ©rencÃ©es** dans le code ou les layouts.
- Certaines logiques sont **dupliquÃ©es** dans diffÃ©rents modules (CAN, export, permissions).
- La structure des dÃ©pendances montre des **modules isolÃ©s** non intÃ©grÃ©s dans le flux principal.

### **Objectif**
- Identifier les Ã©lÃ©ments inutilisÃ©s **rÃ©els** pour pouvoir les intÃ©grer ou nettoyer dans les futurs dÃ©veloppements.
- PrÃ©parer le terrain pour une utilisation complÃ¨te de toutes les fonctionnalitÃ©s disponibles.

## **2. Code Kotlin â€“ Ã‰lÃ©ments inutilisÃ©s**

| Ã‰lÃ©ment | Localisation | Ã‰tat | Explication | Proposition |
|---------|--------------|------|-------------|-------------|
| `VehicleCapabilitiesEditor` | `ui/VehicleCapabilitiesEditor.kt` | Classe non instanciÃ©e | PrÃ©vue pour Ã©dition des capacitÃ©s mais non branchÃ©e | Lâ€™intÃ©grer dans un futur menu â€œCapacitÃ©s vÃ©hiculeâ€ |
| `UiUpdater.autoScrollIfEnabled()` | `utils/UiUpdater.kt` | MÃ©thode inutilisÃ©e | PrÃ©vue pour le log CAN mais non appelÃ©e | Lier au recyclage du log CAN dans `DiagnosticsFragment` |
| `PermissionUtils.checkLocationPermission()` | `utils/PermissionUtils.kt` | MÃ©thode inutilisÃ©e | Gestion permission localisation non implÃ©mentÃ©e | IntÃ©grer dans `MainActivity` avant connexion Bluetooth |
| `PsaKeyCalculator.calculateKeyFromPin()` | `modules/PsaKeyCalculator.kt` | MÃ©thode inutilisÃ©e | PrÃ©vue pour calcul de clÃ© PIN mais non branchÃ©e | Ajouter dans le flux dâ€™authentification |
| `LogExporter.exportLogsAsText()` | `utils/LogExporter.kt` | MÃ©thode inutilisÃ©e | Version CSV utilisÃ©e Ã  la place | PrÃ©voir option dâ€™export texte dans `MainActivity` |

---

## **3. Ressources Android inutilisÃ©es**

### **Layouts**
- `res/layout/item_can_log.xml` â†’ jamais gonflÃ© (`inflate`) dans le code.

### **Drawables**
- `res/drawable/ic_car.xml` â†’ icÃ´ne jamais utilisÃ©e.
- `res/drawable/ic_exit.xml` â†’ icÃ´ne non utilisÃ©e.

### **Arrays**
- `baud_rates` (`arrays.xml`) â†’ non utilisÃ© dans prÃ©fÃ©rences ni code.
- `vehicle_types` (`arrays.xml`) â†’ non utilisÃ©.

### **ChaÃ®nes (`strings.xml`)**
*(Localisation + ligne exacte disponible dans la version dÃ©taillÃ©e finale)*
- `pref_autoscroll_title`
- `pref_autoscroll_summary`
- `pref_vehicle_title`
- `pref_vehicle_summary`
- `pref_theme_title`
- `pref_theme_summary`
- `pref_language_title`
- `pref_language_summary`
- `menu_exit`
- `dialog_confirm_exit`
- `toast_export_success`
- `toast_export_failure`
- `label_vehicle_editor`
- `label_capabilities_editor`
- `status_connected`
- `status_disconnected`

---

## **4. Redondances dÃ©tectÃ©es**
- **Gestion CAN** : plusieurs modules (`CanBusModule`, `GenericCanDemoModule`) rÃ©implÃ©mentent la mÃªme logique de parsing â†’ mutualisable.
- **Permissions** : vÃ©rifications redondantes dans `MainActivity` et `PermissionUtils`.
- **Export** : logique similaire entre `ReportGenerator` et `LogExporter`.

---

## **5. Carte des dÃ©pendances simplifiÃ©e (Mermaid)**

```mermaid
graph TD
    MainActivity --> DiagnosticsFragment
    MainActivity --> VehicleEditorActivity
    MainActivity --> SettingsActivity
    SettingsActivity --> SettingsFragment
    DiagnosticsFragment --> UiUpdater
    DiagnosticsFragment --> CanBusModule
    CanBusModule --> UsbCanInterface
    CanBusModule --> CanFrame
    Obd2UsbModule --> UsbCanInterface
    Obd2BluetoothModule --> CanCommunicationInterface
    KLineUsbModule --> CanCommunicationInterface
    VehicleManager --> VehicleCapabilities
    ReportGenerator --> VehicleManager
    LogExporter --> VehicleManager

--- Fichier : PSA_Immo_Tool_Carte.drawio ---

<mxfile host="app.diagrams.net">
  <diagram name="PSA Immo Tool - Carte des appels" id="PSA_CALL_MAP">
    <mxGraphModel>
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />

        <!-- === LÃ‰GENDE === -->
        <mxCell id="legend" value="LÃ©gende :
Vert = UtilisÃ©
Rouge = Orphelin (jamais appelÃ©)" style="rounded=1;fillColor=#ffffff;strokeColor=#000000;fontSize=12;" vertex="1" parent="1">
          <mxGeometry x="20" y="20" width="240" height="60" as="geometry" />
        </mxCell>

        <!-- === PSA KEY CALCULATOR === -->
        <mxCell id="PsaKeyCalculator" value="PsaKeyCalculator.calculateKey" style="rounded=1;fillColor=#b7e1cd;strokeColor=#60a87a;" vertex="1" parent="1">
          <mxGeometry x="320" y="100" width="220" height="40" as="geometry" />
        </mxCell>

        <!-- === UI UPDATER === -->
        <mxCell id="UiUpdater" value="UiUpdater" style="rounded=1;fillColor=#b7e1cd;strokeColor=#60a87a;" vertex="1" parent="1">
          <mxGeometry x="320" y="200" width="160" height="40" as="geometry" />
        </mxCell>

        <!-- === VEHICLE MANAGER === -->
        <mxCell id="VehicleManager" value="VehicleManager" style="rounded=1;fillColor=#b7e1cd;strokeColor=#60a87a;" vertex="1" parent="1">
          <mxGeometry x="320" y="300" width="180" height="40" as="geometry" />
        </mxCell>

        <!-- === PERMISSION UTILS (ORPHELIN) === -->
        <mxCell id="PermissionUtils" value="PermissionUtils (orphelin)" style="rounded=1;fillColor=#f4c7c3;strokeColor=#b85450;" vertex="1" parent="1">
          <mxGeometry x="40" y="420" width="220" height="40" as="geometry" />
        </mxCell>

        <!-- === LOG EXPORTER (ORPHELIN) === -->
        <mxCell id="LogExporter" value="LogExporter (orphelin)" style="rounded=1;fillColor=#f4c7c3;strokeColor=#b85450;" vertex="1" parent="1">
          <mxGeometry x="40" y="500" width="220" height="40" as="geometry" />
        </mxCell>

        <!-- === GENERIC CAN DEMO MODULE (ORPHELIN) === -->
        <mxCell id="GenericCanDemoModule" value="GenericCanDemoModule (orphelin)" style="rounded=1;fillColor=#f4c7c3;strokeColor=#b85450;" vertex="1" parent="1">
          <mxGeometry x="40" y="580" width="260" height="40" as="geometry" />
        </mxCell>

        <!-- === UPDATE MANAGER (ORPHELIN) === -->
        <mxCell id="UpdateManager" value="UpdateManager (orphelin)" style="rounded=1;fillColor=#f4c7c3;strokeColor=#b85450;" vertex="1" parent="1">
          <mxGeometry x="40" y="660" width="220" height="40" as="geometry" />
        </mxCell>

        <!-- === REPORT GENERATOR === -->
        <mxCell id="ReportGenerator" value="ReportGenerator" style="rounded=1;fillColor=#b7e1cd;strokeColor=#60a87a;" vertex="1" parent="1">
          <mxGeometry x="320" y="400" width="200" height="40" as="geometry" />
        </mxCell>

        <!-- === DIAGNOSTIC RECORDER (ORPHELIN) === -->
        <mxCell id="DiagnosticRecorder" value="DiagnosticRecorder (orphelin)" style="rounded=1;fillColor=#f4c7c3;strokeColor=#b85450;" vertex="1" parent="1">
          <mxGeometry x="40" y="740" width="260" height="40" as="geometry" />
        </mxCell>

        <!-- === FRAME INTERPRETER (ORPHELIN) === -->
        <mxCell id="FrameInterpreter" value="FrameInterpreter (orphelin)" style="rounded=1;fillColor=#f4c7c3;strokeColor=#b85450;" vertex="1" parent="1">
          <mxGeometry x="40" y="820" width="240" height="40" as="geometry" />
        </mxCell>

        <!-- === CONTEXT PROVIDER (ORPHELIN) === -->
        <mxCell id="ContextProvider" value="ContextProvider (orphelin)" style="rounded=1;fillColor=#f4c7c3;strokeColor=#b85450;" vertex="1" parent="1">
          <mxGeometry x="40" y="900" width="240" height="40" as="geometry" />
        </mxCell>

        <!-- === LOCALE UTILS === -->
        <mxCell id="LocaleUtils" value="LocaleUtils" style="rounded=1;fillColor=#b7e1cd;strokeColor=#60a87a;" vertex="1" parent="1">
          <mxGeometry x="320" y="500" width="180" height="40" as="geometry" />
        </mxCell>

        <!-- === MAIN ACTIVITY === -->
        <mxCell id="MainActivity" value="MainActivity" style="rounded=1;fillColor=#b7e1cd;strokeColor=#60a87a;" vertex="1" parent="1">
          <mxGeometry x="600" y="300" width="160" height="40" as="geometry" />
        </mxCell>

        <!-- === DIAGNOSTICS FRAGMENT === -->
        <mxCell id="DiagnosticsFragment" value="DiagnosticsFragment" style="rounded=1;fillColor=#b7e1cd;strokeColor=#60a87a;" vertex="1" parent="1">
          <mxGeometry x="600" y="200" width="200" height="40" as="geometry" />
        </mxCell>

        <!-- === MODULES === -->
        <mxCell id="CanBusModule" value="CanBusModule" style="rounded=1;fillColor=#b7e1cd;strokeColor=#60a87a;" vertex="1" parent="1">
          <mxGeometry x="600" y="100" width="180" height="40" as="geometry" />
        </mxCell>

        <mxCell id="Obd2UsbModule" value="Obd2UsbModule" style="rounded=1;fillColor=#b7e1cd;strokeColor=#60a87a;" vertex="1" parent="1">
          <mxGeometry x="880" y="100" width="180" height="40" as="geometry" />
        </mxCell>

        <mxCell id="Obd2BluetoothModule" value="Obd2BluetoothModule" style="rounded=1;fillColor=#b7e1cd;strokeColor=#60a87a;" vertex="1" parent="1">
          <mxGeometry x="880" y="200" width="200" height="40" as="geometry" />
        </mxCell>

        <mxCell id="KLineUsbModule" value="KLineUsbModule" style="rounded=1;fillColor=#b7e1cd;strokeColor=#60a87a;" vertex="1" parent="1">
          <mxGeometry x="880" y="300" width="180" height="40" as="geometry" />
        </mxCell>

        <!-- === LIENS === -->
        <mxCell id="edge1" edge="1" parent="1" source="CanBusModule" target="PsaKeyCalculator" />
        <mxCell id="edge2" edge="1" parent="1" source="Obd2UsbModule" target="PsaKeyCalculator" />
        <mxCell id="edge3" edge="1" parent="1" source="Obd2BluetoothModule" target="PsaKeyCalculator" />
        <mxCell id="edge4" edge="1" parent="1" source="DiagnosticsFragment" target="UiUpdater" />
        <mxCell id="edge5" edge="1" parent="1" source="MainActivity" target="UiUpdater" />
        <mxCell id="edge6" edge="1" parent="1" source="MainActivity" target="VehicleManager" />
        <mxCell id="edge7" edge="1" parent="1" source="VehicleEditorActivity" target="VehicleManager" />
        <mxCell id="edge8" edge="1" parent="1" source="ReportGenerator" target="VehicleManager" />
        <mxCell id="edge9" edge="1" parent="1" source="SettingsFragment" target="LocaleUtils" />
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>

--- Fichier : README-EN.md ---

# PSA Immo Tool

> ðŸ”§ Android diagnostic application dedicated to PSA vehicles (Peugeot, CitroÃ«n, DS).
> Supports multiple communication modules (CAN, K-Line, OBD2) via USB, UART, and Bluetooth.
> Designed for mobile use and Android Auto Automotive OS.

---

## ðŸ“ Project Structure

```
psa_immo_usb_tool_project/
â”œâ”€â”€ automotive/              # Android Auto module
â”œâ”€â”€ core/                    # (optional) Shared utilities
â”œâ”€â”€ mobile/                  # Main module (mobile application)
â”‚   â”œâ”€â”€ res/                 # UI resources (layout, drawables, strings...)
â”‚   â”œâ”€â”€ java/com/helly/psaimmotool/
â”‚   â”‚   â”œâ”€â”€ MainActivity.kt  # Main activity
â”‚   â”‚   â”œâ”€â”€ modules/         # All communication modules
â”‚   â”‚   â”œâ”€â”€ utils/           # Generic tools (logs, permissions, locale, UI, update)
â”‚   â”‚   â””â”€â”€ can/             # CAN interfaces and frames
â”‚   â””â”€â”€ AndroidManifest.xml
â”œâ”€â”€ settings.gradle
â”œâ”€â”€ build.gradle
â””â”€â”€ README.md                # This file
```

---

## ðŸ§© Features by Module

### 1. CanBusModule (USB)

* ðŸ“¡ CAN communication via USB port
* ðŸ”‘ `sendPinRequest()` â†’ Read PIN code
* ðŸš— `sendVinRequest()` â†’ Read VIN
* ðŸ§ª `listenAll()` â†’ Continuous reception
* ðŸ§¾ `sendCustomFrame(frame)` â†’ Send custom frame

### 2. CanBusUartModule (UART)

* Uses `usb-serial-for-android`
* ðŸ”Œ `connectUsb(context)`
* Includes all the above functions +:

  * ðŸ“ˆ `sendTripDataCar(...)` : distance, consumption, speed
  * ðŸ”§ `sendCarInfo(...)` : speed, RPM, fuel level
  * ðŸŽ›ï¸ `sendButtonCode(code)` : steering wheel button commands
  * ðŸŒ¡ï¸ `sendTemperature(temp)`

### 3. KLineUsbModule (USB)

* For older ECUs
* Supports:

  * `connectUsb(context)`
  * `sendVinRequest()`
  * `sendCommand(frame)`

### 4. Obd2UsbModule (USB)

* OBD2 via USB port
* `connectUsb(context)`
* `sendVinRequest()`

### 5. Obd2BluetoothModule

* OBD2 communication via classic Bluetooth
* ðŸ”Ž Scans and pairs with devices
* ðŸ”„ Connects via `createRfcommSocketToServiceRecord()`
* `sendVinRequest()` or `sendCommand(frame)`

---

## ðŸŽ¨ User Interface (activity\_main.xml)

* Module selector (USB / UART / Bluetooth)
* List of Bluetooth devices
* Buttons:

  * Connect
  * Read VIN
  * Read PIN
  * Start CAN listening
  * Send custom frame
  * Export / clear logs
  * **Generate report** (full diagnostic)
  * **Automatic update** (UpdateManager)
* Light/Dark theme toggle
* Language: ðŸ‡«ðŸ‡· / ðŸ‡¬ðŸ‡§
* Log area with scroll (ScrollView)

---

## ðŸŒ Translations (strings.xml)

* Supports French and English
* Handled via `LocaleUtils.setLocaleAndRestart(...)`

---

## ðŸ–Œï¸ Themes

* Based on Material3
* Customized via `styles.xml`:

  * `Widget.PsaImmoTool.PrimaryButton`
  * `Widget.PsaImmoTool.SecondaryButton`
  * `Widget.PsaImmoTool.FrameInput`
  * `Widget.PsaImmoTool.SectionTitle`

---

## ðŸ”§ Permissions Used

* `android.permission.USB_PERMISSION`
* `android.permission.BLUETOOTH_CONNECT`
* `android.permission.BLUETOOTH`
* `android.permission.BLUETOOTH_ADMIN`
* `android.permission.INTERNET` (for updates)

Managed dynamically via `PermissionUtils`.

---

## ðŸ”¤ Language & Restart

* **Dynamic language change** with controlled restart:

```kotlin
LocaleUtils.setLocaleAndRestart(activity, "en")
```

---

## ðŸ› ï¸ Build

* Android Studio Hedgehog or newer
* Target API: `34` or `36`
* Gradle: `8.2.1` minimum
* Kotlin `1.9.x`

---

## ðŸš— Android Auto Support

> `automotive/` module (optional, can be ignored if unused)

* Uses `androidx.car.app`
* Registers through `CarService.kt`
* Declared in `AndroidManifest.xml` + `automotive_app_desc.xml`

---

## ðŸ”„ Automatic Update (UpdateManager)

* Checks online version via `version.txt` on GitHub
* Downloads the latest APK `mobile-release.apk`
* Installs automatically via FileProvider
* Accessible in ActionBar menu > **Update**

---

## âœ… Module Status

| Module              | Type      | Status       | Supported Frames     |
| ------------------- | --------- | ------------ | -------------------- |
| CanBusModule        | USB       | âœ… Functional | VIN, PIN, Custom CAN |
| CanBusUartModule    | UART      | âœ… Functional | VIN, PIN, Temp, etc. |
| KLineUsbModule      | USB       | âœ… Functional | VIN, Custom K-Line   |
| Obd2UsbModule       | USB       | âœ… Functional | VIN                  |
| Obd2BluetoothModule | Bluetooth | âœ… Functional | VIN, Custom OBD2     |

---

## ðŸ’¬ Example Frames

```text
22 F1 90      â†’ PIN request
09 02         â†’ VIN request
FD 04 02 01   â†’ Steering wheel button command
```

---

## ðŸ§  Internal Architecture

* `UiUpdater`: thread-safe UI updates
* `FrameInterpreter`: decode frames to user-readable text
* `LogExporter`: export raw logs
* `PermissionUtils`: centralized permissions
* `LocaleUtils`: language switching
* `UpdateManager`: automatic update handling

---

## ðŸ§¼ Log and Report Management

* `clearLogsButton` resets the log area
* Export to `.txt` with permission checks
* Reports generated via `generateReportButton`

---

## âœï¸ Contact / Author

> MickaÃ«l Z.
> Private automotive diagnostic project for educational purposes.

---

## ðŸ“¦ ToDo or Future Improvements

* [ ] ISO-TP support
* [ ] Tablet interface
* [ ] Real-time charts
* [ ] UART speed selection
* [ ] VIN history management
* [ ] Full OTA support (GitHub API)

---

## ðŸ“˜ License

Private project, not intended for public distribution, not open-source.

--- Fichier : README.md ---

# PSA Immo Tool

> ðŸ”§ Application Android de diagnostic automobile dÃ©diÃ©e aux vÃ©hicules PSA (Peugeot, CitroÃ«n, DS).
> Supporte plusieurs modules de communication (CAN, K-Line, OBD2) via USB, UART et Bluetooth.
> ConÃ§ue pour lâ€™usage mobile et Android Auto Automotive OS.

---

## ðŸ“ Arborescence du Projet

```
psa_immo_usb_tool_project/
â”œâ”€â”€ automotive/              # Module Android Auto
â”œâ”€â”€ core/                    # (optionnel) Contenait des utilitaires partagÃ©s
â”œâ”€â”€ mobile/                  # Module principal (application mobile)
â”‚   â”œâ”€â”€ res/                 # Ressources UI (layout, drawables, strings...)
â”‚   â”œâ”€â”€ java/com/helly/psaimmotool/
â”‚   â”‚   â”œâ”€â”€ MainActivity.kt  # ActivitÃ© principale
â”‚   â”‚   â”œâ”€â”€ modules/         # Tous les modules de communication
â”‚   â”‚   â”œâ”€â”€ utils/           # Outils gÃ©nÃ©riques (log, permissions, langue, UI, update)
â”‚   â”‚   â””â”€â”€ can/             # Interfaces et trames CAN
â”‚   â””â”€â”€ AndroidManifest.xml
â”œâ”€â”€ settings.gradle
â”œâ”€â”€ build.gradle
â””â”€â”€ README.md                # Ce fichier
```

---

## ðŸ§© FonctionnalitÃ©s par module

### 1. CanBusModule (USB)

* ðŸ“¡ Communication CAN via port USB
* ðŸ”‘ `sendPinRequest()` â†’ Lecture du code PIN
* ðŸš— `sendVinRequest()` â†’ Lecture du VIN
* ðŸ§ª `listenAll()` â†’ RÃ©ception en continu
* ðŸ§¾ `sendCustomFrame(frame)` â†’ Envoi de trame personnalisÃ©e

### 2. CanBusUartModule (UART)

* Utilise `usb-serial-for-android`
* ðŸ”Œ `connectUsb(context)`
* Toutes les fonctions ci-dessus + :

  * ðŸ“ˆ `sendTripDataCar(...)` : distance, consommation, vitesse
  * ðŸ”§ `sendCarInfo(...)` : vitesse, RPM, niveau carburant
  * ðŸŽ›ï¸ `sendButtonCode(code)` : commandes bouton volant
  * ðŸŒ¡ï¸ `sendTemperature(temp)`

### 3. KLineUsbModule (USB)

* Pour anciens calculateurs
* Supporte :

  * `connectUsb(context)`
  * `sendVinRequest()`
  * `sendCommand(frame)`

### 4. Obd2UsbModule (USB)

* OBD2 par port USB
* `connectUsb(context)`
* `sendVinRequest()`

### 5. Obd2BluetoothModule

* Communication OBD2 via Bluetooth classique
* ðŸ”Ž Scanne et associe un pÃ©riphÃ©rique
* ðŸ”„ Connecte via `createRfcommSocketToServiceRecord()`
* `sendVinRequest()` ou `sendCommand(frame)`

---

## ðŸŽ¨ Interface utilisateur (activity\_main.xml)

* SÃ©lecteur de module (USB / UART / Bluetooth)
* Liste des pÃ©riphÃ©riques Bluetooth
* Boutons :

  * Connexion
  * Lecture VIN
  * Lecture PIN
  * Ã‰coute CAN
  * Envoi de trame personnalisÃ©e
  * Export / suppression des logs
  * **GÃ©nÃ©ration de rapports** (Diagnostic complet)
  * **Mise Ã  jour automatique** (UpdateManager)
* ThÃ¨me clair/sombre sÃ©lectionnable
* Langue : ðŸ‡«ðŸ‡· / ðŸ‡¬ðŸ‡§
* Zone de logs avec dÃ©filement (ScrollView)

---

## ðŸŒ Traductions (strings.xml)

* FranÃ§ais / Anglais supportÃ©s
* Via `LocaleUtils.setLocaleAndRestart(...)`

---

## ðŸ–Œï¸ ThÃ¨mes

* BasÃ© sur Material3
* Personnalisation via `styles.xml` :

  * `Widget.PsaImmoTool.PrimaryButton`
  * `Widget.PsaImmoTool.SecondaryButton`
  * `Widget.PsaImmoTool.FrameInput`
  * `Widget.PsaImmoTool.SectionTitle`

---

## ðŸ”§ Permissions utilisÃ©es

* `android.permission.USB_PERMISSION`
* `android.permission.BLUETOOTH_CONNECT`
* `android.permission.BLUETOOTH`
* `android.permission.BLUETOOTH_ADMIN`
* `android.permission.INTERNET` (pour les mises Ã  jour)

DemandÃ©es dynamiquement via `PermissionUtils`.

---

## ðŸ”¤ Langue & RedÃ©marrage

* **Changement dynamique** par redÃ©marrage contrÃ´lÃ© :

```kotlin
LocaleUtils.setLocaleAndRestart(activity, "fr")
```

---

## ðŸ› ï¸ Compilation

* Android Studio Hedgehog ou plus rÃ©cent
* API Target : `34` ou `36`
* Gradle : `8.2.1` minimum
* Kotlin `1.9.x`

---

## ðŸš— Support Android Auto

> Module `automotive/` (facultatif, peut Ãªtre ignorÃ© si non utilisÃ©)

* Utilise `androidx.car.app`
* S'enregistre via `CarService.kt`
* DÃ©clarÃ© dans le `AndroidManifest.xml` + `automotive_app_desc.xml`

---

## ðŸ”„ Mise Ã  jour automatique (UpdateManager)

* VÃ©rifie la version en ligne via `version.txt` sur GitHub
* TÃ©lÃ©charge la derniÃ¨re APK `mobile-release.apk`
* Installation automatique via FileProvider
* Accessible dans le menu ActionBar > **Update**

---

## âœ… Statut des modules

| Module              | Type      | Statut        | Trames supportÃ©es    |
| ------------------- | --------- | ------------- | -------------------- |
| CanBusModule        | USB       | âœ… Fonctionnel | VIN, PIN, Custom CAN |
| CanBusUartModule    | UART      | âœ… Fonctionnel | VIN, PIN, Temp, etc. |
| KLineUsbModule      | USB       | âœ… Fonctionnel | VIN, Custom K-Line   |
| Obd2UsbModule       | USB       | âœ… Fonctionnel | VIN                  |
| Obd2BluetoothModule | Bluetooth | âœ… Fonctionnel | VIN, Custom OBD2     |

---

## ðŸ’¬ Exemple de trame

```text
22 F1 90      â†’ RequÃªte PIN
09 02         â†’ RequÃªte VIN
FD 04 02 01   â†’ Commande bouton volant
```

---

## ðŸ§  Architecture interne

* `UiUpdater`: mise Ã  jour UI depuis modules (thread-safe)
* `FrameInterpreter`: dÃ©code trames vers chaÃ®nes utilisateur
* `LogExporter`: export texte brut
* `PermissionUtils`: centralisation permissions
* `LocaleUtils`: gestion changement de langue
* `UpdateManager`: gestion mise Ã  jour automatique

---

## ðŸ§¼ Nettoyage des logs et rapports

* Bouton `clearLogsButton` remet la zone texte Ã  zÃ©ro
* Export en `.txt` avec permissions vÃ©rifiÃ©es
* Rapport gÃ©nÃ©rÃ© via `generateReportButton`

---

## âœï¸ Contact / auteur

> MickaÃ«l Z.
> Projet de diagnostic automobile privÃ© Ã  but pÃ©dagogique.

---

## ðŸ“¦ ToDo ou AmÃ©liorations futures

* [ ] Support ISO-TP
* [ ] Interface tablette
* [ ] Graphiques temps rÃ©el
* [ ] Choix dÃ©bit UART
* [ ] Gestion historique VIN
* [ ] Support OTA complet (GitHub API)

---

## ðŸ“˜ Licence

Projet privÃ©, non destinÃ© Ã  une diffusion publique, non opensource.

--- Fichier : settings.gradle ---

rootProject.name = 'psa_immo_usb_tool_project'
include ':mobile',':core', ':automotive'

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral() // Essential for many libraries
        // For libraries hosted on JitPack (common for GitHub projects)
        maven { url 'https://jitpack.io' }
    }
}


--- Fichier : automotive\build.gradle ---

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.helly.psaimmotool.automotive'
    compileSdk 36

    defaultConfig {
        minSdk 26
        targetSdk 36
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation project(':core')
    implementation 'androidx.car.app:app:1.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.9.2'
}

--- Fichier : automotive\consumer-rules.pro ---


--- Fichier : automotive\proguard-rules.pro ---


--- Fichier : automotive\src\main\AndroidManifest.xml ---

<manifest package="com.helly.psaimmotool.automotive"
    xmlns:android="http://schemas.android.com/apk/res/android">

    <application android:allowBackup="false">
        <service
            android:name=".CarService"
            android:exported="true"
            android:foregroundServiceType="connectedDevice"
            android:permission="androidx.car.app.CarApp">
            <intent-filter>
                <action android:name="androidx.car.app.CarAppService" />
            </intent-filter>
            <meta-data
                android:name="androidx.car.app"
                android:resource="@xml/automotive_app_desc" />
        </service>
    </application>
</manifest>

--- Fichier : automotive\src\main\java\com\helly\psaimmotool\automotive\CarService.kt ---

package com.helly.psaimmotool.automotive

import androidx.car.app.CarAppService
import androidx.car.app.Session
import androidx.car.app.validation.HostValidator

class CarService : CarAppService() {
    override fun createHostValidator(): HostValidator =
        HostValidator.ALLOW_ALL_HOSTS_VALIDATOR // usage perso / dev

    override fun onCreateSession(): Session = MainSession()
}

--- Fichier : automotive\src\main\java\com\helly\psaimmotool\automotive\MainScreen.kt ---

package com.helly.psaimmotool.automotive

import android.os.Build
import androidx.annotation.RequiresApi
import androidx.car.app.CarContext
import androidx.car.app.Screen
import androidx.car.app.model.*
import com.helly.psaimmotool.ports.StatusPort

/**
 * Ã‰cran principal Android Auto (projection). 
 * PrÃªt Ã  compiler; branchement au "moteur" Ã  activer (voir TODO).
 */
class MainScreen(private val ctx: CarContext) : Screen(ctx) {

    // Stockage trÃ¨s simple pour l'exemple
    private val logs = mutableListOf<String>()
    private var status: String = "PrÃªt"

    // Port de statut qui recevra les messages des modules existants
    private val carStatusPort = object : StatusPort {
//        override fun setStatus(text: String) {
//            status = text
//            invalidate()
//        }

        override fun appendLog(line: String) {
            logs.add(0, line)
            if (logs.size > 200) logs.removeAt(logs.lastIndex)
            invalidate()
        }

//        override fun appendOutput(line: String) {
//            logs.add(0, line)
//            if (logs.size > 200) logs.removeAt(logs.lastIndex)
//            invalidate()
//        }

        override fun setConnectedStatus(text: String, module: String) {
            status = text
            if (module.isNotBlank()) {
                logs.add(0, "ðŸ“¡ $status")
                if (logs.size > 200) logs.removeAt(logs.lastIndex)

            }
            invalidate()
        }

        override fun appendLogRes(resId: Int, vararg args: Any) {
            val msg = ctx.getString(resId, *args)
            appendLog(msg)
        }
    }

    // TODO: instancier ici votre module existant (sans renommer quoi que ce soit) et lui injecter le port :

    // Pour que ce fichier compile sans dÃ©pendances, on laisse un "engine" factice :
    private val engine = object {
        fun connect() { carStatusPort.appendLog("Connexion (stub)") }
        fun sendVinRequest() { carStatusPort.appendLog("VIN request (stub)") }
        fun sendPinRequest() { carStatusPort.appendLog("PIN request (stub)") }
        fun listenAll() { carStatusPort.appendLog("Listen all (stub)") }
    }

    override fun onGetTemplate(): Template {
        val list = ItemList.Builder()
            .addItem(
                Row.Builder()
                    .setTitle("Connexion")
                    .addText("Initialiser le lien (USB/BT)")
                    .setOnClickListener { engine.connect() }
                    .build()
            )
            .addItem(
                Row.Builder()
                    .setTitle("Lire VIN")
                    .addText("Envoie commande et lit la rÃ©ponse")
                    .setOnClickListener { engine.sendVinRequest() }
                    .build()
            )
            .addItem(
                Row.Builder()
                    .setTitle("Lire PIN")
                    .addText("Lecture code PIN")
                    .setOnClickListener { engine.sendPinRequest() }
                    .build()
            )
            .addItem(
                Row.Builder()
                    .setTitle("Ã‰couter CAN")
                    .addText("Ã‰coute toutes trames")
                    .setOnClickListener { engine.listenAll() }
                    .build()
            )
            .build()

        val statusRow = Row.Builder()
            .setTitle("Statut")
            .addText(status)
            .build()

        val logItems = ItemList.Builder().apply {
            logs.take(10).forEach { addItem(Row.Builder().setTitle(it).build()) }
        }.build()

        return PaneTemplate.Builder(
            Pane.Builder()
                .addRow(statusRow)
                .addAction(Action.BACK)
                .build()
        )
            .setHeaderAction(Action.APP_ICON)
            .setTitle("PSA Immo Tool")
            .setActionStrip(
                ActionStrip.Builder()
                    .addAction(Action.Builder()
                        .setTitle("VIN")
                        .setOnClickListener { engine.sendVinRequest() }
                        .build())
                    .addAction(Action.Builder()
                        .setTitle("PIN")
                        .setOnClickListener { engine.sendPinRequest() }
                        .build())
                    .build()
            )
            .build()
    }
}

--- Fichier : automotive\src\main\java\com\helly\psaimmotool\automotive\MainSession.kt ---

package com.helly.psaimmotool.automotive

import android.content.Intent
import androidx.car.app.Screen
import androidx.car.app.Session

class MainSession : Session() {
    override fun onCreateScreen(intent: Intent): Screen = MainScreen(carContext)
}

--- Fichier : automotive\src\main\java\com\helly\psaimmotool\automotive\StatusReporter.kt ---

package com.helly.psaimmotool.automotive

import android.content.Context
import com.helly.psaimmotool.protocol.Reporter
import com.helly.psaimmotool.ports.StatusPort

class StatusReporter(
    private val context: Context,
    private val port: StatusPort
) : Reporter {

    override fun log(line: String) {
        port.appendLog(line)
    }

    override fun logRes(resId: Int, vararg args: Any) {
        val txt = context.getString(resId, *args)
        port.appendLog(txt)
    }

    override fun setStatus(text: String, module: String) {
        port.setConnectedStatus(text, module)
    }
}

--- Fichier : automotive\src\main\res\xml\automotive_app_desc.xml ---

<?xml version="1.0" encoding="utf-8"?>
<automotiveApp
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:name="PSA Immo Tool"
    android:usesCarApi="1" />

--- Fichier : core\build.gradle ---

plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    namespace 'com.helly.psaimmotool.core'

    compileSdk 36

    defaultConfig {
        minSdk 21
        targetSdk 36
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.17.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\can\CanCommunicationInterface.kt ---

package com.helly.psaimmotool.can

interface CanCommunicationInterface {
    fun connect()
    fun disconnect()
    fun sendFrame(frame: CanFrame)
    fun startListening(callback: (CanFrame) -> Unit)
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\can\CanFrame.kt ---

package com.helly.psaimmotool.can

data class CanFrame(
    val id: Int,
    val data: ByteArray
) {
    fun toHexString(): String {
        val idHex = String.format("%03X", id)
        val dataHex = data.joinToString(" ") { "%02X".format(it) }
        return "$idHex $dataHex"
    }

    override fun toString(): String {
        return toHexString()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as CanFrame

        if (id != other.id) return false
        if (!data.contentEquals(other.data)) return false

        return true
    }

    override fun hashCode(): Int {
        var result = id
        result = 31 * result + data.contentHashCode()
        return result
    }

    companion object {
        /**
         * Parse une chaÃ®ne comme : "7E0 04 27 02 AA BB"
         */
        fun parse(line: String): CanFrame {
            try {
                val parts = line.trim().split(" ")
                val id = parts[0].toInt(16)
                val dataBytes = parts.drop(2).map { it.toInt(16).toByte() }.toByteArray()
                return CanFrame(id, dataBytes)
            } catch (e: Exception) {
                return CanFrame(0, byteArrayOf()) // Valeur vide en cas d'erreur
            }
        }
    }

}

--- Fichier : core\src\main\java\com\helly\psaimmotool\can\UsbCanInterface.kt ---

package com.helly.psaimmotool.can

import com.helly.psaimmotool.ports.StatusPort
import java.util.*
import kotlin.concurrent.fixedRateTimer

class UsbCanInterface(
    private val statusPort: StatusPort?, // injectÃ© depuis mobile
    private val resIdConnected: Int,
    private val resIdDisconnected: Int,
    private val resIdSend: Int,
    private val resIdListeningStarted: Int,
    private val resIdSimulatedFrame: Int
) : CanCommunicationInterface {

    private var isConnected = false
    private var timer: Timer? = null
    private var callback: ((CanFrame) -> Unit)? = null

    override fun connect() {
        isConnected = true
        statusPort?.appendLogRes(resIdConnected)
    }

    override fun disconnect() {
        isConnected = false
        timer?.cancel()
        statusPort?.appendLogRes(resIdDisconnected)
    }

    override fun sendFrame(frame: CanFrame) {
        if (!isConnected) return
        statusPort?.appendLogRes(resIdSend, frame.toHexString())
    }

    override fun startListening(callback: (CanFrame) -> Unit) {
        if (!isConnected) return
        this.callback = callback

        timer = fixedRateTimer("CanSimListen", initialDelay = 2000, period = 3000) {
            val simulated = CanFrame(
                0x7E8,
                byteArrayOf(
                    0x62, 0xF1.toByte(), 0x90.toByte(),
                    '1'.code.toByte(), '2'.code.toByte(), '3'.code.toByte(), '4'.code.toByte()
                )
            )
            callback(simulated)
            statusPort?.appendLogRes(resIdSimulatedFrame, simulated.toHexString())
        }

        statusPort?.appendLogRes(resIdListeningStarted)
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\modules\PSAKeyCalculator.kt ---

package com.helly.psaimmotool.modules

import android.content.Context
import com.helly.psaimmotool.utils.*

object PsaKeyCalculator {

    data class KeyParams(
        val appKey: String,
        val sec1: IntArray,
        val sec2: IntArray
    ) {
        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false

            other as KeyParams

            if (appKey != other.appKey) return false
            if (!sec1.contentEquals(other.sec1)) return false
            if (!sec2.contentEquals(other.sec2)) return false

            return true
        }

        override fun hashCode(): Int {
            var result = appKey.hashCode()
            result = 31 * result + sec1.contentHashCode()
            result = 31 * result + sec2.contentHashCode()
            return result
        }
    }

    // DerniÃ¨re opÃ©ration (pour affichage dans rapport)
    var lastCalculation: Pair<String, String>? = null

    // Base des vÃ©hicules pris en charge
    private val seedKeyDatabase: Map<Triple<String, String, Int>, KeyParams> = mapOf(
        Triple("Peugeot", "207", 2008) to KeyParams("D91C", intArrayOf(0xB2, 0x3F, 0xAA), intArrayOf(0xB1, 0x02, 0xAB)),
        Triple("Peugeot", "207", 2010) to KeyParams("D91C", intArrayOf(0xB2, 0x3F, 0xAA), intArrayOf(0xB1, 0x02, 0xAB)),
        Triple("Peugeot", "307", 2007) to KeyParams("1A2B", intArrayOf(0xA9, 0x01, 0xAC), intArrayOf(0xB1, 0x02, 0xAB)),
        Triple("CitroÃ«n", "C3", 2009) to KeyParams("A55A", intArrayOf(0xB2, 0x3F, 0xAA), intArrayOf(0xB1, 0x02, 0xAB)),
        Triple("DS", "DS3", 2015) to KeyParams("1A2B", intArrayOf(0xB2, 0x3F, 0xAA), intArrayOf(0xB1, 0x02, 0xAB)),
        Triple("Toyota", "ProAce", 2014) to KeyParams("C00L", intArrayOf(0xB2, 0x3F, 0xAA), intArrayOf(0xB1, 0x02, 0xAB)),
        Triple("Ducati", "848", 2009) to KeyParams("BEEF", intArrayOf(0xB2, 0x3F, 0xAA), intArrayOf(0xB1, 0x02, 0xAB))
    )



    fun hasKeyAlgoFor(vehicle: Triple<String, String, Int>): Boolean {
        return seedKeyDatabase.containsKey(vehicle)
    }

    fun calculateKey(seed: ByteArray): ByteArray {
        fun transform(data: Int, sec: IntArray): Int {
            var d = data
            if (d > 32767) d = -(32768 - (d % 32768))
            var result = (((d % sec[0]) * sec[2]) and 0x0FFFFFFF) -
                    (((d / sec[0]) and 0xFFFFFFFF.toInt()) * sec[1] and 0x0FFFFFFF)
            result = result and 0xFFFFFFFF.toInt()
            if (result < 0) result += (sec[0] * sec[2]) + sec[1]
            return result and 0xFFFF
        }

        val vehicle = VehicleManager.selectedVehicle
        val params = seedKeyDatabase[vehicle]

        if (params == null) {
            lastCalculation = Pair(
                seed.joinToString(" ") { "%02X".format(it) },
                "NO_KEY_ALGO"
            )
            return byteArrayOf(0x00, 0x00)
        }

        val seedHex = seed.joinToString("") { "%02X".format(it) }.padStart(8, '0')
        val s0 = seedHex.substring(0, 2)
        val s1 = seedHex.substring(2, 4)
        val s2 = seedHex.substring(4, 6)
        val s3 = seedHex.substring(6, 8)

        val ak0 = params.appKey.substring(0, 2)
        val ak1 = params.appKey.substring(2, 4)

        val resMsb = transform((ak0 + ak1).toInt(16), params.sec1) or
                transform((s0 + s3).toInt(16), params.sec2)
        val resLsb = transform((s1 + s2).toInt(16), params.sec1) or
                transform(resMsb, params.sec2)

        val result = ((resMsb and 0xFFFF) shl 16) or (resLsb and 0xFFFF)
        val hex = result.toUInt().toString(16).padStart(8, '0').uppercase()

        lastCalculation = Pair(
            seed.joinToString(" ") { "%02X".format(it) },
            hex.chunked(2).joinToString(" ")
        )

        return byteArrayOf(
            hex.substring(0, 2).toInt(16).toByte(),
            hex.substring(2, 4).toInt(16).toByte()
        )

    }
    fun addVehicleKey(vehicle: Triple<String, String, Int>, appKey: String) {
        val defaultSec1 = intArrayOf(0xB2, 0x3F, 0xAA)
        val defaultSec2 = intArrayOf(0xB1, 0x02, 0xAB)
        val newEntry = KeyParams(appKey, defaultSec1, defaultSec2)

        // Clone la map mutable
        val updated = seedKeyDatabase.toMutableMap()
        updated[vehicle] = newEntry

        // Remplace la map (non idÃ©ale, mais simple ici)
        val field = PsaKeyCalculator::class.java.getDeclaredField("seedKeyDatabase")
        field.isAccessible = true
        field.set(this, updated)
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\modules\VehicleModule.kt ---

package com.helly.psaimmotool.modules

import com.helly.psaimmotool.protocol.CanProtocol
import com.helly.psaimmotool.protocol.Protocol

class VehicleModule(private val protocol: Protocol) {

    fun connect() = protocol.connect()
    fun disconnect() = protocol.disconnect()

    fun requestVin() = protocol.requestVin()
    fun requestPin() = protocol.requestPin()
    fun requestDtc() = protocol.requestDtc()

    fun startCanListening() {
        when (protocol) {
            is CanProtocol -> protocol.startListening()
            // K-Line/OBD2 : si tu veux un "listen", on pourra lâ€™ajouter plus tard
        }
    }
    fun sendCustomFrame(frame: String) = protocol.sendFrame(frame)
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\ports\StatusPort.kt ---

package com.helly.psaimmotool.ports

import androidx.annotation.StringRes
/**
 * Petit port optionnel pour relayer l'Ã©tat et les logs vers Android Auto
 * sans renommer vos classes/fonctions existantes.
 */
interface StatusPort {
 //   fun setStatus(text: String)
    fun appendLog(line: String)
  //  fun appendOutput(line: String)
    fun setConnectedStatus(text: String, module: String)

    /** Ajoute une ligne de log traduite Ã  partir d'une ressource */
    fun appendLogRes(@StringRes resId: Int, vararg args: Any)

}

--- Fichier : core\src\main\java\com\helly\psaimmotool\protocol\CanProtocol.kt ---

package com.helly.psaimmotool.protocol

import com.helly.psaimmotool.can.CanFrame
import com.helly.psaimmotool.utils.DiagnosticRecorder
import com.helly.psaimmotool.utils.FrameInterpreter
import com.helly.psaimmotool.modules.PsaKeyCalculator

class CanProtocol(private val transport: TransportInterface) : Protocol {

    private var reporter: Reporter? = null
    private var awaitingSeed = false
    private var awaitingPin = false

    override fun withReporter(r: Reporter?): Protocol {
        this.reporter = r
        return this
    }

    override fun connect() {
        transport.connect()
        reporter?.setStatus("ConnectÃ© au CAN", "CAN")
        DiagnosticRecorder.setConnectionStatus(true)
    }

    override fun disconnect() {
        transport.disconnect()
        reporter?.setStatus("DÃ©connectÃ©", "")
    }

    override fun sendFrame(frame: String) {
        reporter?.log("âž¡ï¸ $frame")
        DiagnosticRecorder.addRawFrame(frame)

        val parsed = CanFrame.parse(frame)
        handlePinSequenceResponse(parsed)

        val decoded = FrameInterpreter.decode(parsed)
        if (decoded.isNotBlank()) {
            reporter?.log("âœ… $decoded")
            DiagnosticRecorder.addDecodedFrame(decoded)
            if (decoded.contains("DTC", true)) {
                DiagnosticRecorder.addDtc(decoded)
            }
        }
    }

    override fun requestVin() {
        sendFrame("7DF 02 01 02")
    }

    override fun requestPin() {
        awaitingSeed = true
        sendFrame("7E0 02 27 01")
    }

    override fun requestDtc() {
        sendFrame("7DF 02 03 00")
    }

    override fun startListening() {
        transport.startListening { frame ->
            reporter?.log("ðŸ“¡ ${frame.toString()}")
            DiagnosticRecorder.addRawFrame(frame.toString())

            val decoded = FrameInterpreter.decode(frame)
            if (decoded.isNotBlank()) {
                reporter?.log("âœ… $decoded")
                DiagnosticRecorder.addDecodedFrame(decoded)
            }
        }
    }

    private fun handlePinSequenceResponse(frame: CanFrame) {
        val data = frame.data
        if (data.isEmpty()) return

        if (awaitingSeed && data.size >= 4 && data[0] == 0x67.toByte() && data[1] == 0x01.toByte()) {
            awaitingSeed = false
            val seed = byteArrayOf(data[2], data[3])
            val seedStr = seed.joinToString(" ") { "%02X".format(it) }
            reporter?.log("Seed reÃ§u: $seedStr")

            val key = PsaKeyCalculator.calculateKey(seed)
            val keyStr = key.joinToString(" ") { "%02X".format(it) }
            sendFrame("7E0 04 27 02 $keyStr")
            reporter?.log("ClÃ© envoyÃ©e: $keyStr")
            awaitingPin = true
            return
        }

        if (awaitingPin && data.size >= 2 && data[0] == 0x67.toByte() && data[1] == 0x02.toByte()) {
            awaitingPin = false
            reporter?.log("DÃ©verrouillÃ© âœ…")
            sendFrame("7E0 03 22 F1 90")
            return
        }

        if (data.size >= 5 && data[0] == 0x62.toByte() && data[1] == 0xF1.toByte() && data[2] == 0x90.toByte()) {
            val pinBytes = data.slice(3 until data.size).toByteArray()
            val pin = pinBytes.toString(Charsets.US_ASCII).trim()
            reporter?.log("PIN reÃ§u: $pin")
            DiagnosticRecorder.addDecodedFrame("PIN: $pin")
        }
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\protocol\KLineProtocol.kt ---

package com.helly.psaimmotool.protocol

import com.helly.psaimmotool.utils.DiagnosticRecorder

class KLineProtocol(private val transport: TransportInterface) : Protocol {

    private var reporter: Reporter? = null

    override fun withReporter(r: Reporter?): Protocol {
        this.reporter = r
        return this
    }

    override fun connect() {
        transport.connect()
        reporter?.setStatus("ConnectÃ© au K-Line", "KLine")
        DiagnosticRecorder.setConnectionStatus(true)
    }

    override fun disconnect() {
        transport.disconnect()
        reporter?.setStatus("DÃ©connectÃ©", "")
    }

    override fun requestVin() {
        sendFrame("81 10 F1 81")
    }

    override fun requestPin() {
        sendFrame("81 12 F1 27 01")
    }

    override fun requestDtc() {
        sendFrame("81 12 F1 03")
    }

    override fun sendFrame(frame: String) {
        reporter?.log("âž¡ï¸ $frame")
        DiagnosticRecorder.addRawFrame(frame)

        if (frame.contains("81")) {
            reporter?.log("VIN reÃ§u (simulÃ©)")
            DiagnosticRecorder.addDecodedFrame("VIN: DEMO123456")
        }
    }

    override fun startListening() {
        transport.startListening { frame ->
            reporter?.log("ðŸ“¡ ${frame.toString()}")
            DiagnosticRecorder.addRawFrame(frame.toString())
        }
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\protocol\Obd2Protocol.kt ---

package com.helly.psaimmotool.protocol

import com.helly.psaimmotool.utils.DiagnosticRecorder
import com.helly.psaimmotool.utils.FrameInterpreter
import com.helly.psaimmotool.can.CanFrame

class Obd2Protocol(private val transport: TransportInterface) : Protocol {

    private var reporter: Reporter? = null

    override fun withReporter(r: Reporter?): Protocol {
        this.reporter = r
        return this
    }

    override fun connect() {
        transport.connect()
        reporter?.setStatus("ConnectÃ© OBD2", "OBD2")
        DiagnosticRecorder.setConnectionStatus(true)
    }

    override fun disconnect() {
        transport.disconnect()
        reporter?.setStatus("DÃ©connectÃ©", "")
    }

    override fun requestVin() {
        sendFrame("09 02")
    }

    override fun requestPin() {
        // Pas dispo en OBD2 standard â†’ on ne fait rien
    }

    override fun requestDtc() {
        sendFrame("03")
    }

    override fun sendFrame(frame: String) {
        reporter?.log("âž¡ï¸ OBD2 $frame")
        DiagnosticRecorder.addRawFrame(frame)

        val parsed = CanFrame.parse(frame)
        val decoded = FrameInterpreter.decode(parsed)
        if (decoded.isNotBlank()) {
            reporter?.log("âœ… $decoded")
            DiagnosticRecorder.addDecodedFrame(decoded)
        }
    }

    override fun startListening() {
        transport.startListening { frame ->
            reporter?.log("ðŸ“¡ ${frame.toString()}")
            DiagnosticRecorder.addRawFrame(frame.toString())

            val decoded = FrameInterpreter.decode(frame)
            if (decoded.isNotBlank()) {
                reporter?.log("âœ… $decoded")
                DiagnosticRecorder.addDecodedFrame(decoded)
            }
        }
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\protocol\Protocol.kt ---

package com.helly.psaimmotool.protocol

interface Protocol {
    fun withReporter(r: Reporter?): Protocol

    fun connect()
    fun disconnect()

    fun requestVin()
    fun requestPin()
    fun requestDtc()

    fun sendFrame(frame: String)
    fun startListening()
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\protocol\Reporter.kt ---

package com.helly.psaimmotool.protocol

/**
 * Interface de log/reportage neutre.
 * Le module ne connaÃ®t pas Android, juste ce contrat.
 */
interface Reporter {
    fun log(line: String)
    fun logRes(resId: Int, vararg args: Any)
    fun setStatus(text: String, module: String = "")
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\protocol\TransportInterface.kt ---

// core/protocol/TransportInterface.kt
package com.helly.psaimmotool.protocol

import com.helly.psaimmotool.can.CanFrame

interface TransportInterface {
    fun connect()
    fun disconnect()
    fun sendFrame(frame: String)
    fun startListening(callback: (CanFrame) -> Unit)
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\transport\BluetoothTransport.kt ---

package com.helly.psaimmotool.transport

import com.helly.psaimmotool.can.CanFrame
import com.helly.psaimmotool.protocol.TransportInterface
import java.util.*
import kotlin.concurrent.fixedRateTimer

/**
 * Transport Bluetooth neutre (simulation simple).
 * Tu pourras le relier Ã  ton stack SPP/ELM327 plus tard.
 */
class BluetoothTransport : TransportInterface {

    private var isConnected = false
    private var timer: Timer? = null

    override fun connect() { isConnected = true }

    override fun disconnect() {
        isConnected = false
        timer?.cancel()
        timer = null
    }

    override fun sendFrame(frame: String) {
        if (!isConnected) return
        // TODO : envoyer sur socket BT quand tu brancheras le vrai backend
    }

    override fun startListening(callback: (CanFrame) -> Unit) {
        if (!isConnected) return
        timer?.cancel()
        // Simulation pÃ©riodique
        timer = fixedRateTimer("BtSimListen", initialDelay = 2000, period = 3000) {
            val simulated = CanFrame(
                0x7E8,
                byteArrayOf(
                    0x62,
                    0xF1.toByte(),
                    0x90.toByte(),
                    'B'.code.toByte(), 'T'.code.toByte(), '0'.code.toByte(), '1'.code.toByte()
                )
            )
            callback(simulated)
        }
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\transport\DemoTransport.kt ---

// core/transport/DemoTransport.kt
package com.helly.psaimmotool.transport

import com.helly.psaimmotool.can.CanFrame
import com.helly.psaimmotool.protocol.TransportInterface
import java.util.*
import kotlin.concurrent.fixedRateTimer

/**
 * Transport purement "dÃ©mo" (simulation), utile pour tes Ã©crans/tests sans matÃ©riel.
 */
class DemoTransport : TransportInterface {

    private var isConnected = false
    private var timer: Timer? = null

    override fun connect() { isConnected = true }

    override fun disconnect() {
        isConnected = false
        timer?.cancel()
        timer = null
    }

    override fun sendFrame(frame: String) {
        if (!isConnected) return
        // Rien : dÃ©mo
    }

    override fun startListening(callback: (CanFrame) -> Unit) {
        if (!isConnected) return
        timer?.cancel()
        timer = fixedRateTimer("DemoSimListen", initialDelay = 1500, period = 2500) {
            // Trame simulÃ©e (ex: DTC)
            val simulated = CanFrame(
                0x7E8,
                byteArrayOf(
                    0x59, // simulateur arbitraire
                    0x02,
                    0x10,
                    0x0F
                )
            )
            callback(simulated)
        }
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\transport\UartTransport.kt ---

// core/transport/UartTransport.kt
package com.helly.psaimmotool.transport

import com.helly.psaimmotool.can.CanFrame
import com.helly.psaimmotool.protocol.TransportInterface
import java.util.*
import kotlin.concurrent.fixedRateTimer

/**
 * Transport "UART" simulÃ©, mÃªme comportement que UsbTransport (timer de frames).
 * Pas de renommage de mÃ©thodes.
 */
class UartTransport : TransportInterface {

    private var isConnected = false
    private var timer: Timer? = null

    override fun connect() { isConnected = true }

    override fun disconnect() {
        isConnected = false
        timer?.cancel()
        timer = null
    }

    override fun sendFrame(frame: String) {
        if (!isConnected) return
        // Ici tu enverras rÃ©ellement sur lâ€™UART quand tu brancheras ton backend
    }

    override fun startListening(callback: (CanFrame) -> Unit) {
        if (!isConnected) return
        timer?.cancel()
        timer = fixedRateTimer("UartSimListen", initialDelay = 2000, period = 3000) {
            // Trame simulÃ©e (ex: rÃ©ponse lecture PIN)
            val simulated = CanFrame(
                0x7E8,
                byteArrayOf(
                    0x62,
                    0xF1.toByte(),
                    0x90.toByte(),
                    '1'.code.toByte(),
                    '2'.code.toByte(),
                    '3'.code.toByte(),
                    '4'.code.toByte()
                )
            )
            callback(simulated)
        }
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\transport\UsbTransport.kt ---

// core/transport/UsbTransport.kt
package com.helly.psaimmotool.transport

import com.helly.psaimmotool.can.CanFrame
import com.helly.psaimmotool.protocol.TransportInterface
import java.util.*
import kotlin.concurrent.fixedRateTimer

class UsbTransport : TransportInterface {

    private var isConnected = false
    private var timer: Timer? = null
    private var callback: ((CanFrame) -> Unit)? = null

    override fun connect() { isConnected = true }
    override fun disconnect() { isConnected = false; timer?.cancel() }
    override fun sendFrame(frame: String) { if (!isConnected) return }

    override fun startListening(callback: (CanFrame) -> Unit) {
        if (!isConnected) return
        this.callback = callback
        timer = fixedRateTimer("CanSimListen", initialDelay = 2000, period = 3000) {
            val simulated = CanFrame(0x7E8, byteArrayOf(0x62, 0xF1.toByte(), 0x90.toByte(),
                '1'.code.toByte(), '2'.code.toByte(), '3'.code.toByte(), '4'.code.toByte()))
            callback(simulated)
        }
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\transport\WifiTransport.kt ---

// core/transport/WifiTransport.kt
package com.helly.psaimmotool.transport

import com.helly.psaimmotool.can.CanFrame
import com.helly.psaimmotool.protocol.TransportInterface

class WifiTransport : TransportInterface {
    override fun connect() { /* Connexion WiFi */ }
    override fun disconnect() { /* DÃ©connexion WiFi */ }
    override fun sendFrame(frame: String) { /* Envoi TCP/UDP */ }
    override fun startListening(callback: (CanFrame) -> Unit) { }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\utils\ContextProvider.kt ---

// Fichier : ContextProvider.kt
package com.helly.psaimmotool.utils

import android.content.Context

object ContextProvider {
    private lateinit var appContext: Context

    fun init(context: Context) {
        appContext = context.applicationContext
    }

    fun getString(resId: Int, vararg formatArgs: Any): String {
        return appContext.getString(resId, *formatArgs)
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\utils\DiagnosticRecorder.kt ---

package com.helly.psaimmotool.utils

object DiagnosticRecorder {
    private val decodedLines = mutableListOf<String>()
    private val dtcList = mutableListOf<String>()

    fun addDecodedInfo(info: String) {
        decodedLines.add(info)
    }

    fun addDtc(code: String) {
        dtcList.add(code)
    }

    fun getDecodedSummary(): String {
        return if (decodedLines.isEmpty()) "Aucune donnÃ©e PID ou CAN dÃ©codÃ©e."
        else decodedLines.joinToString(separator = "\n")
    }

    fun getDtcSummary(): String {
        return if (dtcList.isEmpty()) "Aucun code dÃ©faut dÃ©tectÃ©."
        else dtcList.joinToString(separator = "\n") { "â— $it" }
    }
    private var connectionOk = false
    private val rawFrames = mutableListOf<String>()
    private val decodedFrames = mutableListOf<String>()

    fun setConnectionStatus(success: Boolean) {
        connectionOk = success
    }

    fun addRawFrame(frame: String) {
        rawFrames.add(frame)
    }

    fun addDecodedFrame(decoded: String) {
        decodedFrames.add(decoded)
    }

    fun clear() {
        decodedLines.clear()
        dtcList.clear()
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\utils\FrameInterpreter.kt ---

package com.helly.psaimmotool.utils

import android.annotation.SuppressLint
import com.helly.psaimmotool.can.CanFrame

object FrameInterpreter {

    fun decode(frame: CanFrame): String {
        val data = frame.data

        return when {
            isDtcFrame(data) -> {
                val dtcList = parseDtc(data)
                "DTC found: ${dtcList.joinToString(", ")}"
            }
            isVinFrame(data) -> decodeVin(data)
            isPinFrame(data) -> decodePin(data)
            isBatteryVoltageFrame(data) -> decodeVoltage(data)
            isTemperatureFrame(data) -> decodeTemperature(data)
            isSeedFrame(data) -> decodeSeed(data)
            else -> "Unknown frame response"
        }
    }

    private fun isVinFrame(data: ByteArray): Boolean {
        return data.size >= 4 && data[0] == 0x49.toByte() && data[1] == 0x02.toByte()
    }

    private fun decodeVin(data: ByteArray): String {
        val vin = data.drop(2).map { it.toInt().toChar() }.joinToString("").trim()
        return "VIN received: $vin"
    }

    private fun isPinFrame(data: ByteArray): Boolean {
        return data.size >= 4 &&
                data[0] == 0x62.toByte() &&
                data[1] == 0xF1.toByte() &&
                data[2] == 0x90.toByte()
    }

    private fun decodePin(data: ByteArray): String {
        val pin = data.drop(3).map { it.toInt().toChar() }.joinToString("").trim()
        return "PIN received: $pin"
    }

    private fun isBatteryVoltageFrame(data: ByteArray): Boolean {
        return data.size >= 3 &&
                data[0] == 0x62.toByte() &&
                data[1] == 0x21.toByte() &&
                data[2] == 0x01.toByte()
    }

    private fun decodeVoltage(data: ByteArray): String {
        val raw = data.getOrNull(3)?.toInt() ?: return ""
        val volts = raw / 10.0
        return "Voltage: $volts V"
    }

    private fun isTemperatureFrame(data: ByteArray): Boolean {
        return data.size >= 3 &&
                data[0] == 0x62.toByte() &&
                data[1] == 0x05.toByte()
    }

    private fun decodeTemperature(data: ByteArray): String {
        val raw = data.getOrNull(2)?.toInt() ?: return ""
        val temp = raw - 40
        return "Engine temperature: $temp Â°C"
    }

    private fun isDtcFrame(data: ByteArray): Boolean {
        return data.isNotEmpty() && data[0] == 0x43.toByte()
    }

    private fun parseDtc(data: ByteArray): List<String> {
        val dtcs = mutableListOf<String>()
        var i = 1
        while (i + 1 < data.size) {
            val code = ((data[i].toInt() and 0xFF) shl 8) or (data[i + 1].toInt() and 0xFF)
            dtcs.add(formatDtc(code))
            i += 2
        }
        return dtcs
    }

    @SuppressLint("DefaultLocale")
    private fun formatDtc(code: Int): String {
        val firstChar = when ((code shr 14) and 0x03) {
            0 -> 'P'
            1 -> 'C'
            2 -> 'B'
            3 -> 'U'
            else -> '?'
        }
        val numeric = code and 0x3FFF
        return "$firstChar${String.format("%04d", numeric)}"
    }

    private fun isSeedFrame(data: ByteArray): Boolean {
        return data.size >= 4 && data[0] == 0x67.toByte() && data[1] == 0x01.toByte()
    }

    private fun decodeSeed(data: ByteArray): String {
        val seed = data.slice(2..3).joinToString(" ") { "%02X".format(it) }
        return "Seed received: $seed"
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\utils\LocaleUtils.kt ---

@file:Suppress("DEPRECATION")

package com.helly.psaimmotool.utils

import android.annotation.SuppressLint
import android.app.Activity
import android.content.Intent
import android.content.res.Configuration
import java.util.Locale
import androidx.appcompat.app.AppCompatDelegate

object LocaleUtils {
//    fun setLocaleAndRestart(activity: Activity, languageCode: String) {
//        val locale = Locale(languageCode)
//        Locale.setDefault(locale)
//
//        val config = Configuration()
//        config.setLocale(locale)
//
//        val resources = activity.resources
//        @Suppress("DEPRECATION")
//        resources.updateConfiguration(config, resources.displayMetrics)
//
//        // RedÃ©marre l'activitÃ© pour appliquer la langue
//        val refresh = Intent(activity, activity::class.java)
//        refresh.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK
//        activity.startActivity(refresh)
//        activity.finish()
//    }


    fun setTheme(activity: Activity, themeValue: String) {
    when (themeValue) {
        "light" -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)
        "dark" -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)
        "system" -> AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)
    }
}
    /**
     * Change the app locale and restart the activity to apply the new locale.
     *
     * @param activity The activity to restart.
     * @param langCode The language code to set (e.g., "en", "fr").
     */

    @SuppressLint("AppBundleLocaleChanges")
    fun setLocaleAndRestart(activity: Activity, langCode: String) {
        val locale = Locale(langCode)
        Locale.setDefault(locale)

        val config = Configuration()
        config.setLocale(locale)
        activity.baseContext.resources.updateConfiguration(config, activity.baseContext.resources.displayMetrics)

        val intent = Intent(activity, activity.javaClass)
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)
        activity.startActivity(intent)
        activity.finish()
    }


}

--- Fichier : core\src\main\java\com\helly\psaimmotool\utils\LogExporter.kt ---

package com.helly.psaimmotool.utils

import android.content.Context
import android.widget.Toast
import com.helly.psaimmotool.R
import java.io.File
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

object LogExporter {

    fun exportLogs(context: Context, content: String) {
        try {
            val dir = File(context.getExternalFilesDir(null), "PSAImmoTool")
            if (!dir.exists()) dir.mkdirs()

            val date = SimpleDateFormat("yyyy-MM-dd_HH-mm-ss", Locale.getDefault()).format(Date())
            val fileName = "log_$date.txt"
            val file = File(dir, fileName)

            FileOutputStream(file).use { it.write(content.toByteArray()) }

            Toast.makeText(
                context,
                context.getString(R.string.log_saved_success, file.absolutePath),
                Toast.LENGTH_LONG
            ).show()

        } catch (e: Exception) {
            Toast.makeText(
                context,
                context.getString(R.string.log_saved_error, e.message ?: "unknown"),
                Toast.LENGTH_LONG
            ).show()
        }
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\utils\PermissionUtils.kt ---

package com.helly.psaimmotool.utils

import android.Manifest
import android.app.Activity
import android.content.pm.PackageManager
import android.os.Build
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

object PermissionUtils {

    // === STORAGE PERMISSIONS ===

    fun hasStoragePermission(activity: Activity): Boolean {
        return when {
            Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU -> {
                ContextCompat.checkSelfPermission(activity, Manifest.permission.READ_MEDIA_IMAGES) == PackageManager.PERMISSION_GRANTED
            }
            Build.VERSION.SDK_INT <= Build.VERSION_CODES.P -> {
                ContextCompat.checkSelfPermission(activity, Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED
            }
            else -> {
                ContextCompat.checkSelfPermission(activity, Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED
            }
        }
    }



    fun requestStoragePermission(activity: Activity, requestCode: Int) {
        return when {
            (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) -> {
                ActivityCompat.requestPermissions(
                    activity,
                    arrayOf(Manifest.permission.READ_MEDIA_IMAGES),
                    requestCode
                )
            }

            (Build.VERSION.SDK_INT <= Build.VERSION_CODES.P) -> {
                ActivityCompat.requestPermissions(
                    activity,
                    arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE),
                    requestCode
                )
            }

            else -> {
                ActivityCompat.requestPermissions(
                    activity,
                    arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE),
                    requestCode
                )
            }
        }
    }
    // === BLUETOOTH PERMISSIONS ===

    fun hasBluetoothPermission(activity: Activity): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            ContextCompat.checkSelfPermission(
                activity, Manifest.permission.BLUETOOTH_CONNECT
            ) == PackageManager.PERMISSION_GRANTED
        } else true
    }

    fun hasBluetoothScanPermission(activity: Activity): Boolean {
        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            ContextCompat.checkSelfPermission(
                activity, Manifest.permission.BLUETOOTH_SCAN
            ) == PackageManager.PERMISSION_GRANTED
        } else true
    }

    fun requestBluetoothPermission(activity: Activity, requestCode: Int) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            ActivityCompat.requestPermissions(
                activity,
                arrayOf(Manifest.permission.BLUETOOTH_CONNECT),
                requestCode
            )
        }
    }

    fun requestBluetoothScanPermission(activity: Activity, requestCode: Int) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            ActivityCompat.requestPermissions(
                activity,
                arrayOf(Manifest.permission.BLUETOOTH_SCAN),
                requestCode
            )
        }
    }

    // === LOCATION PERMISSIONS ===

    fun hasLocationPermission(activity: Activity): Boolean {
        return ContextCompat.checkSelfPermission(
            activity, Manifest.permission.ACCESS_FINE_LOCATION
        ) == PackageManager.PERMISSION_GRANTED
    }

    fun requestLocationPermission(activity: Activity, requestCode: Int) {
        ActivityCompat.requestPermissions(
            activity,
            arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
            requestCode
        )
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\utils\Prefs.kt ---

package com.helly.psaimmotool.utils

object Prefs {
    const val FILE = "psaimmo_prefs"
    const val KEY_AUTOSCROLL = "pref_autoscroll"
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\utils\ReportGenerator.kt ---

package com.helly.psaimmotool.utils

import android.content.Context
import com.helly.psaimmotool.R
import com.helly.psaimmotool.modules.*
import java.io.File
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.*

object ReportGenerator {

    fun generate(context: Context, moduleName: String, logs: String): String {
        val (brand, model, year) = VehicleManager.selectedVehicle
        val capabilities = VehicleCapabilities.getCapabilities(brand, model, year)
        val algoAvailable = PsaKeyCalculator.hasKeyAlgoFor(VehicleManager.selectedVehicle)

        val date = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())
        val safeDate = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())

        val report = buildString {
            appendLine(context.getString(R.string.report_header))
            appendLine("${context.getString(R.string.report_date)} $date")
            appendLine("${context.getString(R.string.report_vehicle)} $brand $model $year")
            appendLine("${context.getString(R.string.report_module)} $moduleName")
            appendLine(context.getString(R.string.report_capabilities))
            appendLine("CAN: ${capabilities?.supportsCan}, OBD2: ${capabilities?.supportsObd2}, K-Line: ${capabilities?.supportsKLine}")
            appendLine("${context.getString(R.string.report_modules)} ${capabilities?.compatibleModules?.joinToString(", ")}")
            if (algoAvailable) {
                val last = PsaKeyCalculator.lastCalculation
                if (last != null) {
                    appendLine(context.getString(R.string.report_seed_received, last.first))
                    appendLine(context.getString(R.string.report_key_calculated, last.second))
                }
            }
            appendLine()
            appendLine(context.getString(R.string.report_logs_section))
            appendLine(logs)
        }

        return try {
            val dir = File(context.getExternalFilesDir(null), "PSAImmoTool")
            if (!dir.exists()) dir.mkdirs()
            val fileName = "rapport_${safeDate}_${brand}_${model}.txt"
            val file = File(dir, fileName)
            FileOutputStream(file).use { it.write(report.toByteArray()) }

            context.getString(R.string.report_saved, file.absolutePath)
        } catch (e: Exception) {
            context.getString(R.string.report_error, e.message ?: "")
        }
    }
}

--- Fichier : core\src\main\java\com\helly\psaimmotool\utils\VehicleCapabilities.kt ---

package com.helly.psaimmotool.utils

import com.helly.psaimmotool.R

object VehicleCapabilities {

    data class Capabilities(
        val brandResId: Int = 0,
        val modelResId: Int = 0,
        val brand: String = "",
        val model: String = "",
        val year: Int = 0,
        val supportsObd2: Boolean,
        val supportsCan: Boolean,
        val supportsKLine: Boolean,
        val compatibleModules: List<String>,
        val defaultFilters: List<String> = emptyList()
    )

    private val capabilitiesMap: MutableMap<Triple<String, String, Int>, Capabilities> = mutableMapOf(

        // --- PEUGEOT ---
        Triple("Peugeot", "207", 2008) to Capabilities(
            R.string.brand_peugeot, R.string.model_207,
            supportsCan = true, supportsObd2 = true, supportsKLine = true,
            compatibleModules = listOf(
                "OBD2 (USB)", "OBD2 (Bluetooth)", "K-Line (USB)",
                "CANBUS (USB)", "CANBUS (UART)", "CANBUS (Demo)"
            )
        ),
        Triple("Peugeot", "207", 2010) to Capabilities(
            R.string.brand_peugeot, R.string.model_207,
            supportsCan = true, supportsObd2 = true, supportsKLine = true,
            compatibleModules = listOf(
                "OBD2 (USB)", "OBD2 (Bluetooth)", "K-Line (USB)",
                "CANBUS (USB)", "CANBUS (UART)", "CANBUS (Demo)"
            )
        ),
        Triple("Peugeot", "307", 2007) to Capabilities(
            R.string.brand_peugeot, R.string.model_307,
            supportsCan = true, supportsObd2 = true, supportsKLine = true,
            compatibleModules = listOf(
                "OBD2 (USB)", "OBD2 (Bluetooth)", "K-Line (USB)",
                "CANBUS (USB)", "CANBUS (UART)", "CANBUS (Demo)"
            )
        ),

        // --- DUCATI ---
        Triple("Ducati", "848", 2009) to Capabilities(
            R.string.brand_ducati, R.string.model_848,
            supportsCan = true, supportsObd2 = true, supportsKLine = false,
            compatibleModules = listOf(
                "OBD2 (USB)", "OBD2 (Bluetooth)",
                "CANBUS (USB)", "CANBUS (UART)", "CANBUS (Demo)"
            )
        ),
        Triple("Ducati", "1098", 2009) to Capabilities(
            R.string.brand_ducati, R.string.model_1098,
            supportsCan = false, supportsObd2 = true, supportsKLine = false,
            compatibleModules = listOf("OBD2 (USB)", "OBD2 (Bluetooth)")
        ),
        Triple("Ducati", "1198", 2010) to Capabilities(
            R.string.brand_ducati, R.string.model_1198,
            supportsCan = false, supportsObd2 = true, supportsKLine = false,
            compatibleModules = listOf("OBD2 (USB)", "OBD2 (Bluetooth)")
        ),

        // --- MG ---
        Triple("MG", "4", 2022) to Capabilities(
            R.string.brand_mg, R.string.model_4,
            supportsCan = true, supportsObd2 = true, supportsKLine = false,
            compatibleModules = listOf(
                "OBD2 (USB)", "OBD2 (Bluetooth)",
                "CANBUS (USB)", "CANBUS (UART)", "CANBUS (Demo)"
            )
        ),
        Triple("MG", "3", 2018) to Capabilities(
            R.string.brand_mg, R.string.model_3,
            supportsCan = false, supportsObd2 = true, supportsKLine = false,
            compatibleModules = listOf("OBD2 (USB)", "OBD2 (Bluetooth)")
        ),
        Triple("MG", "Marvel R", 2021) to Capabilities(
            R.string.brand_mg, R.string.model_marvel_r,
            supportsCan = true, supportsObd2 = true, supportsKLine = false,
            compatibleModules = listOf("OBD2 (USB)", "OBD2 (Bluetooth)", "CANBUS (UART)")
        ),

        // --- FORD ---
        Triple("Ford", "Mustang Mach-E", 2021) to Capabilities(
            R.string.brand_ford, R.string.model_mustang_mache,
            supportsCan = true, supportsObd2 = true, supportsKLine = false,
            compatibleModules = listOf(
                "OBD2 (USB)", "OBD2 (Bluetooth)",
                "CANBUS (USB)", "CANBUS (UART)", "CANBUS (Demo)"
            )
        ),
        Triple("Ford", "Mustang (2000+)", 2000) to Capabilities(
            R.string.brand_ford, R.string.model_mustang_series,
            supportsCan = false, supportsObd2 = true, supportsKLine = false,
            compatibleModules = listOf("OBD2 (USB)", "OBD2 (Bluetooth)")
        ),
        Triple("Ford", "Kuga", 2019) to Capabilities(
            R.string.brand_ford, R.string.model_kuga,
            supportsCan = false, supportsObd2 = true, supportsKLine = false,
            compatibleModules = listOf("OBD2 (USB)", "OBD2 (Bluetooth)")
        ),
        Triple("Ford", "Puma", 2020) to Capabilities(
            R.string.brand_ford, R.string.model_puma,
            supportsCan = false, supportsObd2 = true, supportsKLine = false,
            compatibleModules = listOf("OBD2 (USB)", "OBD2 (Bluetooth)")
        ),
        Triple("Ford", "Fiesta", 2017) to Capabilities(
            R.string.brand_ford, R.string.model_fiesta,
            supportsCan = false, supportsObd2 = true, supportsKLine = false,
            compatibleModules = listOf("OBD2 (USB)", "OBD2 (Bluetooth)")
        ),

        // --- TOYOTA ---
        Triple("Toyota", "Corolla", 2020) to Capabilities(
            R.string.brand_toyota, R.string.model_corolla,
            supportsCan = true, supportsObd2 = true, supportsKLine = false,
            compatibleModules = listOf("OBD2 (USB)", "OBD2 (Bluetooth)", "CANBUS (USB)")
        )
    )

    fun getAllBrands(): List<String> = capabilitiesMap.keys.map { it.first }.distinct().sorted()
    fun getModelsForBrand(brand: String): List<String> =
        capabilitiesMap.keys.filter { it.first == brand }.map { it.second }.distinct().sorted()
    fun getYearsForModel(brand: String, model: String): List<Int> =
        capabilitiesMap.keys.filter { it.first == brand && it.second == model }
            .map { it.third }.distinct().sorted()

    fun getCapabilities(brand: String?, model: String?, year: Int?): Capabilities? {
        if (brand == null || model == null || year == null) return null
        return capabilitiesMap[Triple(brand, model, year)]
    }
    fun overrideCapabilities(key: Triple<String, String, Int>, capabilities: Capabilities) {
        capabilitiesMap[key] = capabilities
    }

    fun getCompatibleModules(): List<String> {
        val vehicle = VehicleManager.selectedVehicle
        return getCapabilities(vehicle.first, vehicle.second, vehicle.third)?.compatibleModules ?: emptyList()
    }

}

--- Fichier : core\src\main\java\com\helly\psaimmotool\utils\VehicleCapabilitiesEditor.kt ---

package com.helly.psaimmotool.utils

object VehicleCapabilitiesEditor {

    fun registerVehicle(
        brand: String,
        model: String,
        year: Int,
        supportsObd2: Boolean,
        supportsCan: Boolean,
        supportsKLine: Boolean,
        compatibleModules: List<String>,
        defaultFilters: List<String> = emptyList()
    ) {
        val key = Triple(brand, model, year)
        val caps = VehicleCapabilities.Capabilities(
            brand = brand,
            model = model,
            year = year,
            supportsObd2 = supportsObd2,
            supportsCan = supportsCan,
            supportsKLine = supportsKLine,
            compatibleModules = compatibleModules,
            defaultFilters = defaultFilters
        )
        VehicleCapabilities.overrideCapabilities(key, caps)
    }
}


--- Fichier : core\src\main\java\com\helly\psaimmotool\utils\VehicleManager.kt ---

package com.helly.psaimmotool.utils

object VehicleManager {
    var selectedVehicle: Triple<String, String, Int> = Triple("Peugeot", "207", 2008)

    // Callback optionnel pour notifier lâ€™UI
    var onVehicleChanged: ((Triple<String, String, Int>) -> Unit)? = null

    fun setVehicle(marque: String, modele: String, annee: Int) {
        selectedVehicle = Triple(marque, modele, annee)
        onVehicleChanged?.invoke(selectedVehicle)
    }
}

--- Fichier : gradle\wrapper\gradle-wrapper.properties ---

distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-9.0.0-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

--- Fichier : mobile\build.gradle ---

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}


// Versioning
// This script reads the version properties from a file and increments the patch version.
// It computes the version code and version name based on the major, minor, and patch versions.
// The version properties file is expected to have the keys VERSION_MAJOR, VERSION_MINOR, and VERSION_PATCH
// The computed version code is a combination of the major, minor, and patch versions.
def versionPropsFile = file('version.properties')
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

if (versionPropsFile.canRead()) {
    Properties versionProps = new Properties()
    versionProps.load(new FileInputStream(versionPropsFile))

    versionMajor = versionProps['VERSION_MAJOR'].toInteger()
    versionMinor = versionProps['VERSION_MINOR'].toInteger()
    versionPatch = versionProps['VERSION_PATCH'].toInteger() + 1

    versionProps['VERSION_PATCH'] = versionPatch.toString()
    versionProps.store(versionPropsFile.newWriter(), null)
}

def computedVersionCode = versionMajor * 10000 + versionMinor * 100 + versionPatch
def computedVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"

android {
    namespace 'com.helly.psaimmotool'
    compileSdk 36

    defaultConfig {
        applicationId "com.helly.psaimmotool"
        minSdk 26
        targetSdk 36
        versionCode computedVersionCode
        versionName computedVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildFeatures {
        buildConfig = true
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    compileOptions {
        // ðŸ‘‰ Passe en Java 11
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        // (facultatif avec AGP 8+, mais tu peux aussi forcer)
        // coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation project(":core")
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:2.1.21'
    implementation 'com.github.mik3y:usb-serial-for-android:3.9.0'
    implementation 'androidx.core:core-ktx:1.17.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.9.2'
    implementation 'androidx.activity:activity-ktx:1.10.1'
    implementation 'androidx.preference:preference-ktx:1.2.1'
}

--- Fichier : mobile\version.properties ---

#Fri Aug 22 10:50:58 CEST 2025
VERSION_MAJOR=2
VERSION_MINOR=2
VERSION_PATCH=23

--- Fichier : mobile\release\output-metadata.json ---

{
  "version": 3,
  "artifactType": {
    "type": "APK",
    "kind": "Directory"
  },
  "applicationId": "com.helly.psaimmotool",
  "variantName": "release",
  "elements": [
    {
      "type": "SINGLE",
      "filters": [],
      "attributes": [],
      "versionCode": 20208,
      "versionName": "2.1.108",
      "outputFile": "mobile-release.apk"
    }
  ],
  "elementType": "File",
  "baselineProfiles": [
    {
      "minApi": 28,
      "maxApi": 30,
      "baselineProfiles": [
        "baselineProfiles/1/mobile-release.dm"
      ]
    },
    {
      "minApi": 31,
      "maxApi": 2147483647,
      "baselineProfiles": [
        "baselineProfiles/0/mobile-release.dm"
      ]
    }
  ],
  "minSdkVersionForDexing": 26
}

--- Fichier : mobile\src\version.txt ---

2.3.0

--- Fichier : mobile\src\main\AndroidManifest.xml ---

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"

    xmlns:tools="http://schemas.android.com/tools"
    package="com.helly.psaimmotool">

    <!-- Permissions Bluetooth -->
    <uses-permission android:name="android.permission.BLUETOOTH" />
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
    <uses-permission android:name="android.permission.BLUETOOTH_CONNECT" />
    <uses-permission android:name="android.permission.BLUETOOTH_SCAN" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />

    <!-- Permissions USB -->
    <uses-feature android:name="android.hardware.usb.host" />
    <uses-permission android:name="android.permission.USB_PERMISSION" />
    <uses-permission android:name="android.hardware.usb.host" />

    <!-- Stockage pour export -->
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"
        android:maxSdkVersion="32" />
    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES"/>
    <uses-permission android:name="android.permission.READ_MEDIA_VIDEO"/>
    <uses-permission android:name="android.permission.READ_MEDIA_AUDIO" />
    <!-- Pour Android 9 et moins (API 28-) -->
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="28" />

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES" />

    <application
        android:allowBackup="true"
        android:label="@string/app_name"
        android:icon="@mipmap/ic_launcher"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.PsaImmoTool">

        <!-- ActivitÃ© Ã©diteur de vÃ©hicule -->
        <activity
            android:name=".VehicleEditorActivity"
            android:exported="false" />

        <!-- ActivitÃ© principale -->
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:windowSoftInputMode="adjustResize">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <activity
            android:name=".SettingsActivity"
            android:exported="false" />
        <provider
            android:name="androidx.core.content.FileProvider"
            android:authorities="${applicationId}.fileprovider"
            android:exported="false"
            android:grantUriPermissions="true">
            <meta-data
                android:name="android.support.FILE_PROVIDER_PATHS"
                android:resource="@xml/file_paths" />
        </provider>

    </application>
</manifest>

--- Fichier : mobile\src\main\java\MainActivity.kt ---

package com.helly.psaimmotool

import android.Manifest
import android.app.Activity
import android.app.AlertDialog
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.content.*
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.widget.*
import androidx.annotation.RequiresPermission
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.view.isVisible
import com.helly.psaimmotool.modules.VehicleModule
import com.helly.psaimmotool.ports.StatusPort
import com.helly.psaimmotool.utils.*
import com.helly.psaimmotool.ports.*
import com.helly.psaimmotool.protocol.*
import com.helly.psaimmotool.transport.*
import com.helly.psaimmotool.mobile.StatusReporter

@Suppress("DEPRECATION")
class MainActivity : AppCompatActivity() {

    private lateinit var connectButton: Button
    private lateinit var requestVinButton: Button
    private lateinit var requestPinButton: Button
    private lateinit var startCanListenButton: Button
    private lateinit var inputFrameText: EditText
    private lateinit var sendFrameButton: Button
    private lateinit var exportLogsButton: Button
    private lateinit var clearLogsButton: Button
    private lateinit var generateReportButton: Button
    private lateinit var statusText: TextView
    private lateinit var outputText: TextView

    private var currentModule: VehicleModule? = null
    private var currentModuleName: String = ""

    private lateinit var bluetoothManager: BluetoothManager
    private var bluetoothAdapter: BluetoothAdapter? = null
    private val bluetoothDevices = mutableListOf<BluetoothDevice>()
    private lateinit var btNamesAdapter: ArrayAdapter<String>
    private var btDialog: AlertDialog? = null
    private var isModuleConnected = false

    // ImplÃ©mentation mobile du StatusPort
    private lateinit var statusPort: StatusPort

    private val bluetoothReceiver = object : BroadcastReceiver() {
        @RequiresPermission(Manifest.permission.BLUETOOTH_CONNECT)
        override fun onReceive(context: Context?, intent: Intent?) {
            when (intent?.action) {
                BluetoothDevice.ACTION_FOUND -> {
                    val device = intent.getParcelableExtra<BluetoothDevice>(BluetoothDevice.EXTRA_DEVICE)
                    if (device != null && bluetoothDevices.none { it.address == device.address }) {
                        bluetoothDevices.add(device)
                        btNamesAdapter.add(device.name ?: device.address ?: getString(R.string.unknown_device))
                        btNamesAdapter.notifyDataSetChanged()
                    }
                }
                BluetoothAdapter.ACTION_DISCOVERY_STARTED -> {
                    context?.let { Toast.makeText(it, R.string.bt_discovery_started, Toast.LENGTH_SHORT).show() }
                }
                BluetoothAdapter.ACTION_DISCOVERY_FINISHED -> {
                    context?.let { Toast.makeText(it, R.string.bt_discovery_finished, Toast.LENGTH_SHORT).show() }
                }
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        bluetoothManager = getSystemService(BLUETOOTH_SERVICE) as BluetoothManager
        bluetoothAdapter = bluetoothManager.adapter

        checkAndRequestAllPermissions(this)
    }

    private fun onPermissionsGranted() {
        bindViews()
        initToolbar()
        setupButtons()

        UiUpdater.init(statusText, outputText)
        ContextProvider.init(applicationContext)

        statusPort = StatusPortImpl(  this)

        registerReceiver(bluetoothReceiver, IntentFilter().apply {
            addAction(BluetoothDevice.ACTION_FOUND)
            addAction(BluetoothAdapter.ACTION_DISCOVERY_STARTED)
            addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED)
        })
    }

    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == 2001) {
            if (grantResults.isNotEmpty() && grantResults.all { it == PackageManager.PERMISSION_GRANTED }) {
                onPermissionsGranted()
            } else {
                Toast.makeText(this, R.string.permission_denied, Toast.LENGTH_LONG).show()
                finish()
            }
        }
    }

    private fun checkAndRequestAllPermissions(activity: Activity) {
        val permissionsToRequest = mutableListOf<String>()

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            if (!PermissionUtils.hasStoragePermission(activity)) {
                permissionsToRequest.add(Manifest.permission.READ_MEDIA_IMAGES)
            }
        } else {
            if (!PermissionUtils.hasStoragePermission(activity)) {
                permissionsToRequest.add(Manifest.permission.WRITE_EXTERNAL_STORAGE)
            }
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            if (!PermissionUtils.hasBluetoothPermission(activity)) {
                permissionsToRequest.add(Manifest.permission.BLUETOOTH_CONNECT)
            }
            if (!PermissionUtils.hasBluetoothScanPermission(activity)) {
                permissionsToRequest.add(Manifest.permission.BLUETOOTH_SCAN)
            }
        }

        if (!PermissionUtils.hasLocationPermission(activity)) {
            permissionsToRequest.add(Manifest.permission.ACCESS_FINE_LOCATION)
        }

        if (permissionsToRequest.isNotEmpty()) {
            ActivityCompat.requestPermissions(activity, permissionsToRequest.toTypedArray(), 2001)
        } else {
            onPermissionsGranted()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        unregisterReceiver(bluetoothReceiver)
    }

    override fun onCreateOptionsMenu(menu: android.view.Menu): Boolean {
        menuInflater.inflate(R.menu.menu_main, menu)
        return true
    }

    override fun onOptionsItemSelected(item: android.view.MenuItem): Boolean {
        return when (item.itemId) {
            R.id.menu_select_vehicle -> { showBrandSelectionDialog(); true }
            R.id.menu_select_module -> { showModuleSelectionDialog(); true }
            R.id.menu_settings -> { startActivity(Intent(this, SettingsActivity::class.java)); true }
            R.id.menu_quit -> { finish(); true }
            else -> super.onOptionsItemSelected(item)
        }
    }

    private fun showBrandSelectionDialog() {
        val brands = VehicleCapabilities.getAllBrands()
        AlertDialog.Builder(this)
            .setTitle(getString(R.string.select_brand))
            .setItems(brands.toTypedArray()) { _, which ->
                showModelSelectionDialog(brands[which])
            }
            .show()
    }

    private fun showModelSelectionDialog(brand: String) {
        val models = VehicleCapabilities.getModelsForBrand(brand)
        AlertDialog.Builder(this)
            .setTitle(getString(R.string.select_model))
            .setItems(models.toTypedArray()) { _, which ->
                showYearSelectionDialog(brand, models[which])
            }
            .show()
    }

    private fun showYearSelectionDialog(brand: String, model: String) {
        val years = VehicleCapabilities.getYearsForModel(brand, model)
        AlertDialog.Builder(this)
            .setTitle(getString(R.string.select_year))
            .setItems(years.map { it.toString() }.toTypedArray()) { _, which ->
                val selectedYear = years[which]
                VehicleManager.selectedVehicle = Triple(brand, model, selectedYear)
                Toast.makeText(this, getString(R.string.vehicle_selected, brand, model, selectedYear), Toast.LENGTH_SHORT).show()
            }
            .show()
    }

    private fun showModuleSelectionDialog() {
        val modules = VehicleCapabilities.getCompatibleModules()
        if (modules.isEmpty()) return

        AlertDialog.Builder(this)
            .setTitle(R.string.select_module)
            .setItems(modules.toTypedArray()) { _, which ->
                val selected = modules[which]
                currentModuleName = selected

                if (selected == getString(R.string.module_obd2_bluetooth)) {
                    currentModule = null
                    updateUiVisibilityForModule()
                    openBluetoothLivePicker()
                } else {
                    buildModuleForName(selected)
                    updateUiVisibilityForModule()
                    isModuleConnected = false
                    connectButton.text = getString(R.string.button_connect)
                }
            }.show()
    }

    private fun openBluetoothLivePicker() {
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN)
            != PackageManager.PERMISSION_GRANTED
        ) {
            Toast.makeText(this, R.string.permission_bt_required, Toast.LENGTH_LONG).show()
            return
        }

        bluetoothAdapter?.cancelDiscovery()
        bluetoothDevices.clear()
        val listView = ListView(this)
        btNamesAdapter = ArrayAdapter(this, android.R.layout.simple_list_item_1)
        listView.adapter = btNamesAdapter

        listView.setOnItemClickListener { _, _, position, _ ->
            val device = bluetoothDevices[position]
            btDialog?.dismiss()

            val reporter = StatusReporter(this, statusPort)
            val transport = BluetoothTransport()
            val protocol = Obd2Protocol(transport).withReporter(reporter)
            currentModule = VehicleModule(protocol)

            updateUiVisibilityForModule()
        }

        btDialog = AlertDialog.Builder(this)
            .setTitle(R.string.bluetooth_devices)
            .setView(listView)
            .setNegativeButton(android.R.string.cancel, null)
            .show()

        bluetoothAdapter?.startDiscovery()
    }

    private fun updateUiVisibilityForModule() {
        val isCanModule = currentModuleName.contains("CANBUS", true)
        requestVinButton.isVisible = currentModule != null || isCanModule
        requestPinButton.isVisible = isCanModule
        startCanListenButton.isVisible = isCanModule
    }

    private fun setupButtons() {
        connectButton.setOnClickListener {
            if (currentModule == null) {
                Toast.makeText(this, R.string.no_module_connected, Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }

            if (!isModuleConnected) {
                currentModule?.connect()
                isModuleConnected = true
                connectButton.text = getString(R.string.button_disconnect)
            } else {
                currentModule?.disconnect()
                isModuleConnected = false
                connectButton.text = getString(R.string.button_connect)
            }
        }

        requestVinButton.setOnClickListener { currentModule?.requestVin() }
        requestPinButton.setOnClickListener { currentModule?.requestPin() }
        startCanListenButton.setOnClickListener { currentModule?.startCanListening() }
        sendFrameButton.setOnClickListener {
            val frame = inputFrameText.text.toString()
            statusPort.appendLog("âž¡ï¸ $frame")
            currentModule?.sendCustomFrame(frame)
        }
        exportLogsButton.setOnClickListener {
            LogExporter.exportLogs(this, outputText.text.toString())
        }
        clearLogsButton.setOnClickListener {
            UiUpdater.clearLog(this)
        }
        generateReportButton.setOnClickListener {
            // Feedback immÃ©diat
            Toast.makeText(this, getString(R.string.requesting_vin_dtc), Toast.LENGTH_SHORT).show()


            // On envoie d'abord les requÃªtes VIN et DTC
            currentModule?.requestVin()
            currentModule?.requestDtc()
            ReportGenerator.generate(this, currentModuleName, outputText.text.toString())
        }
    }

    private fun buildModuleForName(name: String) {
        val reporter = StatusReporter(this, statusPort)

        currentModule = when (name) {
            getString(R.string.module_obd2_usb) -> {
                val transport = UsbTransport()
                val protocol = Obd2Protocol(transport).withReporter(reporter)
                VehicleModule(protocol)
            }
            getString(R.string.module_kline_usb) -> {
                val transport = UsbTransport()
                val protocol = KLineProtocol(transport).withReporter(reporter)
                VehicleModule(protocol)
            }
            getString(R.string.module_canbus) -> {
                val transport = UsbTransport()
                val protocol = CanProtocol(transport).withReporter(reporter)
                VehicleModule(protocol)
            }
            getString(R.string.module_canbus_uart) -> {
                val transport = UartTransport()
                val protocol = CanProtocol(transport).withReporter(reporter)
                VehicleModule(protocol)
            }
            getString(R.string.module_can_demo) -> {
                val transport = DemoTransport()
                val protocol = CanProtocol(transport).withReporter(reporter)
                VehicleModule(protocol)
            }
            else -> null
        }
    }

    private fun bindViews() {
        connectButton = findViewById(R.id.connectButton)
        requestVinButton = findViewById(R.id.requestVinButton)
        requestPinButton = findViewById(R.id.requestPinButton)
        startCanListenButton = findViewById(R.id.startCanListenButton)
        inputFrameText = findViewById(R.id.inputFrameText)
        sendFrameButton = findViewById(R.id.sendFrameButton)
        exportLogsButton = findViewById(R.id.exportLogsButton)
        clearLogsButton = findViewById(R.id.clearLogsButton)
        generateReportButton = findViewById(R.id.generateReportButton)
        statusText = findViewById(R.id.statusText)
        outputText = findViewById(R.id.outputText)
    }

    private fun initToolbar() {
        val toolbar = findViewById<androidx.appcompat.widget.Toolbar>(R.id.mainToolbar)
        setSupportActionBar(toolbar)
    }

    companion object {
        const val REQ_BT_PERMS = 1001
    }
}

--- Fichier : mobile\src\main\java\com\helly\psaimmotool\SettingsActivity.kt ---

package com.helly.psaimmotool

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity

class SettingsActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        supportFragmentManager.beginTransaction()
            .replace(android.R.id.content, SettingsFragment())
            .commit()
    }
}

--- Fichier : mobile\src\main\java\com\helly\psaimmotool\SettingsFragment.kt ---

package com.helly.psaimmotool

import android.content.Intent
import android.os.Bundle
import androidx.preference.Preference
import com.helly.psaimmotool.BuildConfig
import androidx.preference.PreferenceFragmentCompat
import com.helly.psaimmotool.update.*
import com.helly.psaimmotool.utils.*
import androidx.preference.ListPreference




class SettingsFragment : PreferenceFragmentCompat() {


    override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
        setPreferencesFromResource(R.xml.prefs, rootKey)

        findPreference<Preference>("vehicle_editor")?.setOnPreferenceClickListener {
            startActivity(Intent(requireContext(), VehicleEditorActivity::class.java))
            true
        }
        // Sauvegarde du toggle autoscroll
        val autoScrollPref = findPreference<Preference>("pref_auto_scroll")
        autoScrollPref?.setOnPreferenceChangeListener { _, newValue ->
            UiUpdater.setAutoScrollEnabled(requireContext(), newValue as Boolean)
            true
        }

        // Theme selector
        val themePref = findPreference<ListPreference>("theme_selector")
        themePref?.setOnPreferenceChangeListener { _, newValue ->
            LocaleUtils.setTheme(requireActivity(), newValue as String)
            true
        }

        // Language selector
        val langPref = findPreference<ListPreference>("language_selector")
        langPref?.setOnPreferenceChangeListener { _, newValue ->
            LocaleUtils.setLocaleAndRestart(requireActivity(), newValue as String)
            true
        }

        findPreference<Preference>("pref_update_app")?.setOnPreferenceClickListener {
            UpdateManager.checkForUpdate(requireContext())
            true
        }
        // Mise Ã  jour bouton
        findPreference<Preference>("pref_check_update")?.setOnPreferenceClickListener {
            UpdateManager.checkForUpdate(requireContext())
            true
        }

        // Affichage version actuelle (texte seul)

        findPreference<Preference>("pref_version")?.summary =
            "v${BuildConfig.VERSION_NAME} (Build ${BuildConfig.VERSION_CODE})"



    }
}




--- Fichier : mobile\src\main\java\com\helly\psaimmotool\VehicleEditorActivity.kt ---

package com.helly.psaimmotool

import android.app.Activity
import android.os.Bundle
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.CheckBox
import android.widget.EditText
import android.widget.Spinner
import android.widget.TextView
import com.helly.psaimmotool.modules.PsaKeyCalculator
import com.helly.psaimmotool.utils.VehicleCapabilitiesEditor
import org.json.JSONArray
import org.json.JSONObject
import java.io.File

class VehicleEditorActivity : Activity() {

    private lateinit var brandField: EditText
    private lateinit var modelField: EditText
    private lateinit var yearField: EditText
    private lateinit var appKeyField: EditText

    private lateinit var checkCan: CheckBox
    private lateinit var checkObd2: CheckBox
    private lateinit var checkKLine: CheckBox
    private lateinit var moduleSpinner: Spinner
    private lateinit var addModuleButton: Button
    private lateinit var moduleListText: TextView

    private lateinit var saveButton: Button
    private lateinit var cancelButton: Button
    private lateinit var statusText: TextView

    private val selectedModules = mutableSetOf<String>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_vehicle_editor)

        brandField = findViewById(R.id.editBrand)
        modelField = findViewById(R.id.editModel)
        yearField = findViewById(R.id.editYear)
        appKeyField = findViewById(R.id.editAppKey)

        checkCan = findViewById(R.id.checkCan)
        checkObd2 = findViewById(R.id.checkObd2)
        checkKLine = findViewById(R.id.checkKLine)

        moduleSpinner = findViewById(R.id.moduleSpinner)
        addModuleButton = findViewById(R.id.addModuleButton)
        moduleListText = findViewById(R.id.recyclerModules)

        saveButton = findViewById(R.id.saveButton)
        cancelButton = findViewById(R.id.buttonCancelConfig)
        statusText = findViewById(R.id.statusText)

        // Remplir la liste des modules depuis le XML
        val modules = resources.getStringArray(R.array.module_list)
        moduleSpinner.adapter = ArrayAdapter(this, android.R.layout.simple_spinner_dropdown_item, modules)

        addModuleButton.setOnClickListener {
            val module = moduleSpinner.selectedItem.toString()
            selectedModules.add(module)
            moduleListText.text = selectedModules.joinToString(", ")
        }
        cancelButton.setOnClickListener {
            finish() // ferme lâ€™activitÃ© et revient Ã  lâ€™Ã©cran prÃ©cÃ©dent
        }
        saveButton.setOnClickListener {
            val brand = brandField.text.toString().trim()
            val model = modelField.text.toString().trim()
            val year = yearField.text.toString().toIntOrNull()
            val appKey = appKeyField.text.toString().uppercase().trim()

            if (brand.isBlank() || model.isBlank() || year == null || appKey.length != 4) {
                statusText.text = getString(R.string.invalid_vehicle_data)
                return@setOnClickListener
            }

            val vehicle = Triple(brand, model, year)

            // Ajout AppKey
            PsaKeyCalculator.addVehicleKey(vehicle, appKey)

            // Ajout CapacitÃ©s
            VehicleCapabilitiesEditor.registerVehicle(
                    brand = brand,
                    model = model,
                    year= year,
                    supportsCan = checkCan.isChecked,
                    supportsObd2 = checkObd2.isChecked,
                    supportsKLine = checkKLine.isChecked,
                    compatibleModules = selectedModules.toList()
                )


            // Sauvegarde persistante locale
            saveVehicleToJson(vehicle, appKey)

            statusText.text = getString(R.string.vehicle_saved, brand, model, year)
        }
    }

    private fun saveVehicleToJson(vehicle: Triple<String, String, Int>, appKey: String) {
        val dir = File(filesDir, "psa_data")
        if (!dir.exists()) dir.mkdirs()
        val file = File(dir, "vehicles.json")

        val array = if (file.exists()) JSONArray(file.readText()) else JSONArray()

        val obj = JSONObject().apply {
            put("brand", vehicle.first)
            put("model", vehicle.second)
            put("year", vehicle.third)
            put("appKey", appKey)
            put("modules", JSONArray(selectedModules))
            put("can", checkCan.isChecked)
            put("obd2", checkObd2.isChecked)
            put("kline", checkKLine.isChecked)
        }

        array.put(obj)
        file.writeText(array.toString(2))
    }
}

--- Fichier : mobile\src\main\java\com\helly\psaimmotool\mobile\StatusReporter.kt ---

package com.helly.psaimmotool.mobile

import android.content.Context
import com.helly.psaimmotool.protocol.Reporter
import com.helly.psaimmotool.ports.StatusPort

class StatusReporter(
    private val context: Context,
    private val port: StatusPort
) : Reporter {

    override fun log(line: String) {
        port.appendLog(line)
    }

    override fun logRes(resId: Int, vararg args: Any) {
        val txt = context.getString(resId, *args)
        port.appendLog(txt)
    }

    override fun setStatus(text: String, module: String) {
        port.setConnectedStatus(text, module)
    }
}






--- Fichier : mobile\src\main\java\com\helly\psaimmotool\ports\StatusPortImpl.kt ---

package com.helly.psaimmotool.ports

import android.content.Context
import com.helly.psaimmotool.utils.UiUpdater

/**
 * ImplÃ©mentation cÃ´tÃ© mobile : formatte via getString(...) et envoie vers l'UI.
 */
class StatusPortImpl(private val context: Context) : StatusPort {

    override fun appendLog(line: String) {
        UiUpdater.appendLog(line)
    }

    override fun appendLogRes(resId: Int, vararg args: Any) {
        val msg = context.getString(resId, *args)
        UiUpdater.appendLog(msg)
    }

//    override fun appendOutput(line: String) {
//        UiUpdater.appendOutput(line)
//    }

//    override fun setStatus(text: String) {
//        UiUpdater.setStatus(text)
//    }

    override fun setConnectedStatus(text: String, module: String) {
        UiUpdater.setConnectedStatus(text, module)
    }
}

--- Fichier : mobile\src\main\java\com\helly\psaimmotool\ui\DiagnosticsFragment.kt ---

package com.helly.psaimmotool.ui

import android.Manifest
import android.annotation.SuppressLint
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.content.*
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.view.*
import android.widget.*
import androidx.annotation.RequiresApi
import androidx.core.app.ActivityCompat
import androidx.core.widget.NestedScrollView
import androidx.fragment.app.Fragment
import com.helly.psaimmotool.*
import com.helly.psaimmotool.modules.*
import com.helly.psaimmotool.protocol.*
import com.helly.psaimmotool.transport.*
import com.helly.psaimmotool.utils.*
import java.io.File
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.*

@Suppress("DEPRECATION")
class DiagnosticsFragment : Fragment() {

    private lateinit var bluetoothDeviceSpinner: Spinner
    private lateinit var connectButton: Button
    private lateinit var requestVinButton: Button
    private lateinit var requestPinButton: Button
    private lateinit var startCanListenButton: Button
    private lateinit var inputFrameText: EditText
    private lateinit var sendFrameButton: Button
    private lateinit var exportLogsButton: Button
    private lateinit var clearLogsButton: Button
    private lateinit var generateReportButton: Button
    private lateinit var statusText: TextView
    private lateinit var outputText: TextView
    private lateinit var mainScroll: NestedScrollView

    // NOTE: on garde le mÃªme nom de variable; seul le type change vers VehicleModule
    private var currentModule: VehicleModule? = null
    private var currentModuleName: String = ""
    private var isConnected = false

    private val bluetoothDevices = mutableListOf<BluetoothDevice>()
    private val bluetoothAdapter: BluetoothAdapter? by lazy { BluetoothAdapter.getDefaultAdapter() }

    private val bluetoothReceiver = object : BroadcastReceiver() {
        @SuppressLint("MissingPermission")
        @RequiresApi(Build.VERSION_CODES.TIRAMISU)
        override fun onReceive(context: Context?, intent: Intent?) {
            if (intent?.action == BluetoothDevice.ACTION_FOUND) {
                val device: BluetoothDevice? =
                    intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE, BluetoothDevice::class.java)

                if (device != null && !bluetoothDevices.contains(device)) {
                    bluetoothDevices.add(device)

                    val names = bluetoothDevices.map { it.name ?: it.address }
                    bluetoothDeviceSpinner.adapter =
                        ArrayAdapter(requireContext(), android.R.layout.simple_spinner_item, names)
                }
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        ContextProvider.init(requireContext().applicationContext)
        DiagnosticRecorder.clear()
        requireContext().registerReceiver(bluetoothReceiver, IntentFilter(BluetoothDevice.ACTION_FOUND))
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            ActivityCompat.requestPermissions(
                requireActivity(),
                arrayOf(
                    Manifest.permission.BLUETOOTH_CONNECT,
                    Manifest.permission.BLUETOOTH_SCAN
                ),
                REQ_BT_PERMS
            )
        }
        val filter = IntentFilter().apply {
            addAction(BluetoothDevice.ACTION_FOUND)
            addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED)
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        requireContext().unregisterReceiver(bluetoothReceiver)
    }

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
        return inflater.inflate(R.layout.fragment_diagnostics, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        bluetoothDeviceSpinner = view.findViewById(R.id.bluetoothDeviceSpinner)
        connectButton = view.findViewById(R.id.connectButton)
        requestVinButton = view.findViewById(R.id.requestVinButton)
        requestPinButton = view.findViewById(R.id.requestPinButton)
        startCanListenButton = view.findViewById(R.id.startCanListenButton)
        inputFrameText = view.findViewById(R.id.inputFrameText)
        sendFrameButton = view.findViewById(R.id.sendFrameButton)
        exportLogsButton = view.findViewById(R.id.exportLogsButton)
        clearLogsButton = view.findViewById(R.id.clearLogsButton)
        generateReportButton = view.findViewById(R.id.generateReportButton)
        statusText = view.findViewById(R.id.statusText)
        outputText = view.findViewById(R.id.outputText)
        mainScroll = view.findViewById(R.id.mainScroll)

        // Initialise lâ€™UI (aprÃ¨s le bind des vues)
        UiUpdater.init(statusText, outputText)
        updateVehicleInfoDisplay()

        // Auto-scroll selon Pref
        val prefs = requireContext().getSharedPreferences(Prefs.FILE, Context.MODE_PRIVATE)
        val autoScroll = prefs.getBoolean(Prefs.KEY_AUTOSCROLL, true)
        if (autoScroll) {
            outputText.addOnLayoutChangeListener { _, _, _, _, _, _, _, _, _ ->
                mainScroll.post { mainScroll.fullScroll(View.FOCUS_DOWN) }
            }
        }

        setupButtons()
    }

    fun onModuleSelected(name: String) {
        currentModuleName = name
        updateUiForSelectedModule()
        if (currentModuleName == getString(R.string.module_obd2_bluetooth)) {
            startBluetoothDiscovery()
        }
    }

    private fun setupButtons() {
        connectButton.setOnClickListener {
            val selected = currentModuleName
            if (selected.isBlank()) return@setOnClickListener

            // Reporter (colle UI simple via UiUpdater)
            val reporter: Reporter = UiReporter(requireContext())

            // Choix transport + protocole (NE PAS passer de context aux transports)
            val protocol = when (selected) {
                getString(R.string.module_obd2_usb)    -> Obd2Protocol(UsbTransport()).withReporter(reporter)
                getString(R.string.module_obd2_bluetooth) -> Obd2Protocol(BluetoothTransport()).withReporter(reporter)
                getString(R.string.module_kline_usb)   -> KLineProtocol(UsbTransport()).withReporter(reporter)
                getString(R.string.module_canbus)      -> CanProtocol(UsbTransport()).withReporter(reporter)
                getString(R.string.module_canbus_uart) -> CanProtocol(UartTransport()).withReporter(reporter)
                getString(R.string.module_can_demo)    -> CanProtocol(DemoTransport()).withReporter(reporter)
                else -> null
            }

            currentModule = protocol?.let { VehicleModule(it) }
            currentModule?.connect()
            isConnected = currentModule != null

        }

        requestVinButton.setOnClickListener { currentModule?.requestVin() }

        requestPinButton.setOnClickListener {
            val vehicle = VehicleManager.selectedVehicle
            if (!PsaKeyCalculator.hasKeyAlgoFor(vehicle)) {
                Toast.makeText(requireContext(), getString(R.string.no_key_algo_for_vehicle), Toast.LENGTH_LONG).show()
            }
            currentModule?.requestPin()
        }

        startCanListenButton.setOnClickListener { currentModule?.startCanListening() }

        sendFrameButton.setOnClickListener {
            val frame = inputFrameText.text.toString()
            UiUpdater.appendLog("\u2B06\uFE0F $frame")
            currentModule?.sendCustomFrame(frame)
        }

        exportLogsButton.setOnClickListener {
            val content = outputText.text.toString()
            LogExporter.exportLogs(requireContext(), content)
        }

        clearLogsButton.setOnClickListener {
            outputText.text = ""
            UiUpdater.appendLog(getString(R.string.logs_cleared))
        }

        generateReportButton.setOnClickListener {
            generateDiagnosticReport()
        }
    }

    private fun updateUiForSelectedModule() {
        val isBt = currentModuleName == getString(R.string.module_obd2_bluetooth)
        bluetoothDeviceSpinner.visibility = if (isBt) View.VISIBLE else View.GONE

        val supportsPin = supportsPin(currentModuleName)
        val algoAvailable = PsaKeyCalculator.hasKeyAlgoFor(VehicleManager.selectedVehicle)
        requestPinButton.visibility = if (supportsPin && algoAvailable) View.VISIBLE else View.GONE

        val supportsCanListen = supportsCanListen(currentModuleName)
        startCanListenButton.visibility = if (supportsCanListen) View.VISIBLE else View.GONE

        requestVinButton.visibility = View.VISIBLE
    }

    private fun supportsPin(moduleName: String) =
        moduleName == getString(R.string.module_canbus) ||
                moduleName == getString(R.string.module_canbus_uart) ||
                moduleName == getString(R.string.module_can_demo) ||
                moduleName == getString(R.string.module_kline_usb)

    private fun supportsCanListen(moduleName: String) =
        moduleName == getString(R.string.module_canbus) ||
                moduleName == getString(R.string.module_canbus_uart) ||
                moduleName == getString(R.string.module_can_demo)

    private fun startBluetoothDiscovery() {
        if (bluetoothAdapter == null) {
            Toast.makeText(requireContext(), getString(R.string.bluetooth_not_supported), Toast.LENGTH_LONG).show()
            return
        }
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S &&
            ActivityCompat.checkSelfPermission(requireContext(), Manifest.permission.BLUETOOTH_SCAN) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(requireActivity(), arrayOf(Manifest.permission.BLUETOOTH_SCAN), 2)
            return
        }

        bluetoothDevices.clear()
        val paired = bluetoothAdapter?.bondedDevices ?: emptySet()
        if (paired.isNotEmpty()) {
            bluetoothDevices.addAll(paired)
            val names = bluetoothDevices.map { it.name ?: it.address }
            bluetoothDeviceSpinner.adapter = ArrayAdapter(requireContext(), android.R.layout.simple_spinner_item, names)
        } else {
            Toast.makeText(requireContext(), getString(R.string.no_paired_bt_devices), Toast.LENGTH_SHORT).show()
        }

        bluetoothAdapter?.startDiscovery()
        Toast.makeText(requireContext(), getString(R.string.bluetooth_scanning), Toast.LENGTH_SHORT).show()
    }

    private fun updateVehicleInfoDisplay() {
        val (brand, model, year) = VehicleManager.selectedVehicle
        val capabilities = VehicleCapabilities.getCapabilities(brand, model, year)
        val algoAvailable = PsaKeyCalculator.hasKeyAlgoFor(VehicleManager.selectedVehicle)
        val capText = buildString {
            append("$brand $model $year\n")
            if (capabilities != null) {
                append("CAN: ${capabilities.supportsCan}, ")
                append("OBD2: ${capabilities.supportsObd2}, ")
                append("K-Line: ${capabilities.supportsKLine}\n")
                append("Modules: ${capabilities.compatibleModules.joinToString(", ")}\n")
            } else {
                append(getString(R.string.no_key_algo_for_vehicle) + "\n")
            }
            append(getString(if (algoAvailable) R.string.pin_algo_present else R.string.pin_algo_absent))
        }
        statusText.text = capText
        Toast.makeText(requireContext(), capText, Toast.LENGTH_LONG).show()
    }

    private fun generateDiagnosticReport() {
        val date = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())
        val safeDate = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(Date())

        val (brand, model, year) = VehicleManager.selectedVehicle
        val vehicle = "$brand $model $year"
        val logs = outputText.text.toString()
        val module = currentModuleName.ifBlank { getString(R.string.module_unknown) }
        val connectionStatus =
            if (isConnected) getString(R.string.connection_success) else getString(R.string.connection_failed)

        val capabilities = VehicleCapabilities.getCapabilities(brand, model, year)
        val supportsCan = capabilities?.supportsCan?.toString() ?: "N/A"
        val supportsObd2 = capabilities?.supportsObd2?.toString() ?: "N/A"
        val supportsKLine = capabilities?.supportsKLine?.toString() ?: "N/A"
        val compatibleModules = capabilities?.compatibleModules?.joinToString(", ") ?: "N/A"

        val report = StringBuilder()
        report.appendLine(getString(R.string.report_header))
        report.appendLine("${getString(R.string.report_date)} $date")
        report.appendLine("${getString(R.string.report_vehicle)} $vehicle")
        report.appendLine("${getString(R.string.report_module)} $module")
        report.appendLine("${getString(R.string.report_connection)} $connectionStatus")
        report.appendLine(getString(R.string.report_capabilities))
        report.appendLine("CAN: $supportsCan, OBD2: $supportsObd2, K-Line: $supportsKLine")
        report.appendLine("${getString(R.string.report_modules)} $compatibleModules")

        val lastSeedAndKey = PsaKeyCalculator.lastCalculation
        if (lastSeedAndKey != null) {
            report.appendLine(getString(R.string.report_seed_received, lastSeedAndKey.first))
            report.appendLine(getString(R.string.report_key_calculated, lastSeedAndKey.second))
        }

        report.appendLine()
        report.appendLine(getString(R.string.report_pid_section))
        report.appendLine(DiagnosticRecorder.getDecodedSummary())
        report.appendLine()
        report.appendLine(getString(R.string.report_dtc_section))
        report.appendLine(DiagnosticRecorder.getDtcSummary())
        report.appendLine()
        report.appendLine(getString(R.string.report_logs_section))
        report.appendLine(logs)

        try {
            val dir = File(requireContext().getExternalFilesDir(null), "PSAImmoTool")
            if (!dir.exists()) dir.mkdirs()

            val fileName = "rapport_${safeDate}_${brand}_${model}.txt"
            val file = File(dir, fileName)
            FileOutputStream(file).use { it.write(report.toString().toByteArray()) }
            UiUpdater.appendLog(outputText, getString(R.string.report_saved, file.absolutePath))
        } catch (e: Exception) {
            UiUpdater.appendLog(outputText, getString(R.string.report_error, e.message ?: ""))
        }
    }

    companion object {
        const val ACTION_USB_PERMISSION = "com.helly.psaimmotool.USB_PERMISSION"
        const val REQ_BT_PERMS = 1001
    }
}

--- Fichier : mobile\src\main\java\com\helly\psaimmotool\ui\UiReporter.kt ---

package com.helly.psaimmotool.ui

import android.content.Context
import com.helly.psaimmotool.protocol.Reporter
import com.helly.psaimmotool.utils.UiUpdater

/**
 * Reporter minimal qui dÃ©lÃ¨gue Ã  UiUpdater.
 * - log(...) et logRes(...) -> appendLog
 * - setStatus(...) -> on logge aussi (safe, pas de dÃ©pendance Ã  StatusPort)
 *
 * NB: on ne renomme rien dans le core. Ce fichier vit cÃ´tÃ© UI (mobile).
 */
class UiReporter(
    private val context: Context? = null
) : Reporter {

    override fun log(line: String) {
        UiUpdater.appendLog(line)
    }

    override fun logRes(resId: Int, vararg args: Any) {
        val msg = if (context != null) {
            try { context.getString(resId, *args) } catch (_: Exception) { "res:$resId" }
        } else {
            "res:$resId"
        }
        UiUpdater.appendLog(msg)
    }

    override fun setStatus(text: String, module: String) {
        val prefix = if (module.isNotBlank()) "[$module] " else ""
        // On reste non-invasif: on trace dans le log (toujours visible)
        UiUpdater.appendLog(prefix + text)
        // Si jamais UiUpdater possÃ¨de une API de statut, tu peux dÃ©commenter la bonne ligne :
        // UiUpdater.setStatus(prefix + text)
        // UiUpdater.setConnectedStatus(prefix + text)   // seulement si Ã§a existe dÃ©jÃ  dans ton UiUpdater
    }
}

--- Fichier : mobile\src\main\java\com\helly\psaimmotool\update\UpdateManager.kt ---

package com.helly.psaimmotool.update

import android.app.Activity
import android.app.AlertDialog
import android.content.ActivityNotFoundException
import android.content.Context
import android.content.Intent
import android.os.Environment
import android.widget.Toast
import androidx.core.content.FileProvider
import com.helly.psaimmotool.BuildConfig
import com.helly.psaimmotool.R
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.io.File
import java.io.FileOutputStream
import java.net.HttpURLConnection
import java.net.URL

object UpdateManager {
    private const val VERSION_URL = "https://raw.githubusercontent.com/Hellorheaven/PSA_IMMO_TOOLS/main/mobile/src/version.txt"
    private const val APK_URL = "https://github.com/Hellorheaven/PSA_IMMO_TOOLS/raw/main/mobile/release/mobile-release.apk"

    fun checkForUpdate(context: Context) {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val connection = URL(VERSION_URL).openConnection() as HttpURLConnection
                connection.connectTimeout = 5000
                connection.readTimeout = 5000

                if (connection.responseCode == HttpURLConnection.HTTP_OK) {
                    val remoteVersion = connection.inputStream.bufferedReader().readText().trim()
                    val localVersion = BuildConfig.VERSION_NAME

                    if (isNewerVersionAvailable(localVersion, remoteVersion)) {
                        (context as? Activity)?.runOnUiThread {
                            promptUpdate(context, remoteVersion)
                        }
                    } else {
                        (context as? Activity)?.runOnUiThread {
                            Toast.makeText(
                                context,
                                context.getString(R.string.update_latest_version, localVersion),
                                Toast.LENGTH_SHORT
                            ).show()
                        }
                    }
                } else {
                    showError(context, context.getString(R.string.update_error_check))
                }
            } catch (e: Exception) {
                e.printStackTrace()
                showError(context, context.getString(R.string.update_error_check))
            }
        }
    }

    private fun isNewerVersionAvailable(local: String, remote: String): Boolean {
        val localParts = local.split(".").mapNotNull { it.toIntOrNull() }
        val remoteParts = remote.split(".").mapNotNull { it.toIntOrNull() }

        for (i in 0..2) {
            val localVal = localParts.getOrElse(i) { 0 }
            val remoteVal = remoteParts.getOrElse(i) { 0 }
            if (remoteVal > localVal) return true
            if (remoteVal < localVal) return false
        }
        return false
    }

    private fun promptUpdate(context: Context, remoteVersion: String) {
        AlertDialog.Builder(context)
            .setTitle(context.getString(R.string.update_title))
            .setMessage(context.getString(R.string.update_message, remoteVersion))
            .setPositiveButton(android.R.string.ok) { _, _ -> downloadAndInstallApk(context) }
            .setNegativeButton(android.R.string.cancel, null)
            .show()
    }

    private fun downloadAndInstallApk(context: Context) {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val apkUrl = URL(APK_URL)
                val connection = apkUrl.openConnection() as HttpURLConnection
                connection.connect()

                if (connection.responseCode != HttpURLConnection.HTTP_OK) {
                    showError(context, context.getString(R.string.update_download_failed))
                    return@launch
                }

                val apkFile = File(context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS), "update.apk")
                connection.inputStream.use { input ->
                    FileOutputStream(apkFile).use { output ->
                        input.copyTo(output)
                    }
                }

                val apkUri = FileProvider.getUriForFile(
                    context,
                    "${context.packageName}.fileprovider",
                    apkFile
                )

                val intent = Intent(Intent.ACTION_VIEW).apply {
                    setDataAndType(apkUri, "application/vnd.android.package-archive")
                    flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_GRANT_READ_URI_PERMISSION
                }

                try {
                    context.startActivity(intent)
                } catch (e: ActivityNotFoundException) {
                    e.printStackTrace()
                    showError(context, context.getString(R.string.update_open_browser_failed))
                }

            } catch (e: Exception) {
                e.printStackTrace()
                showError(context, context.getString(R.string.update_download_failed))
            }
        }
    }

    private fun showError(context: Context, message: String) {
        (context as? Activity)?.runOnUiThread {
            Toast.makeText(context, message, Toast.LENGTH_LONG).show()
        }
    }
}

--- Fichier : mobile\src\main\java\com\helly\psaimmotool\utils\UiUpdater.kt ---

package com.helly.psaimmotool.utils
import android.content.Context
import android.content.SharedPreferences
import android.widget.TextView
import androidx.preference.PreferenceManager
import com.helly.psaimmotool.*
import androidx.core.content.edit

object UiUpdater {

    private var statusText: TextView? = null
    private var outputText: TextView? = null

    private const val KEY_AUTO_SCROLL = "auto_scroll_enabled"

    fun init(statusView: TextView, outputView: TextView) {
        statusText = statusView
        outputText = outputView
    }



    fun appendLog(outputText: TextView?,message: String) {
        outputText?.append("$message\n")
        autoScrollIfEnabled()
    }

    fun appendLog(message: String) {
        outputText?.append("$message\n")
        autoScrollIfEnabled()
    }

    fun clearLog(context: Context) {
        outputText?.text = ""
        appendLog(context.getString(R.string.logs_cleared))
    }

    fun setConnectedStatus(status: String, module: String) {
        statusText?.text = status
        if (module.isNotBlank()) {
            appendLog("ðŸ“¡ $status")
        }
    }

    fun setAutoScrollEnabled(context: Context, enabled: Boolean) {
        val prefs: SharedPreferences = PreferenceManager.getDefaultSharedPreferences(context)
        prefs.edit { putBoolean(KEY_AUTO_SCROLL, enabled) }
    }

//    fun isAutoScrollEnabled(context: Context): Boolean {
//        val prefs: SharedPreferences = PreferenceManager.getDefaultSharedPreferences(context)
 //       return prefs.getBoolean(KEY_AUTO_SCROLL, true)
 //   }

    private fun autoScrollIfEnabled() {
        // Peut Ãªtre enrichi pour scroll automatique
        // Exemple : scrollView.fullScroll(View.FOCUS_DOWN)
    }
}

--- Fichier : mobile\src\main\res\drawable\ic_car.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp" android:height="24dp"
    android:viewportWidth="24" android:viewportHeight="24">
    <path
        android:fillColor="#FF000000"
        android:pathData="M5,16c-0.83,0 -1.5,0.67 -1.5,1.5s0.67,1.5 1.5,1.5 1.5,-0.67 1.5,-1.5S5.83,16 5,16zM19,16c-0.83,0 -1.5,0.67 -1.5,1.5s0.67,1.5 1.5,1.5 1.5,-0.67 1.5,-1.5S19.83,16 19,16zM18.92,5.01C18.72,4.42 18.16,4 17.5,4h-11c-0.66,0 -1.22,0.42 -1.42,1.01L3,12v8c0,0.55 0.45,1 1,1h1c0.55,0 1,-0.45 1,-1v-1h12v1c0,0.55 0.45,1 1,1h1c0.55,0 1,-0.45 1,-1v-8L18.92,5.01zM6.85,6h10.29l1.04,3H5.81L6.85,6zM19,15H5v-2h14v2z"/>
</vector>

--- Fichier : mobile\src\main\res\drawable\ic_exit.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp" android:height="24dp"
    android:viewportWidth="24" android:viewportHeight="24">
    <path
        android:fillColor="#FF000000"
        android:pathData="M10.09,15.59L11.5,17 16.5,12 11.5,7 10.09,8.41 12.67,11H3v2h9.67l-2.58,2.59zM19,3H5c-1.1,0 -2,0.9 -2,2v4h2V5h14v14H5v-4H3v4c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2V5c0,-1.1 -0.9,-2 -2,-2z"/>
</vector>

--- Fichier : mobile\src\main\res\drawable\ic_launcher_background.xml ---

<?xml version="1.0" encoding="utf-8"?>
<vector
    android:height="108dp"
    android:width="108dp"
    android:viewportHeight="108"
    android:viewportWidth="108"
    xmlns:android="http://schemas.android.com/apk/res/android">
    <path android:fillColor="#3DDC84"
          android:pathData="M0,0h108v108h-108z"/>
    <path android:fillColor="#00000000" android:pathData="M9,0L9,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,0L19,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M29,0L29,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M39,0L39,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M49,0L49,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M59,0L59,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M69,0L69,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M79,0L79,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M89,0L89,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M99,0L99,108"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,9L108,9"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,19L108,19"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,29L108,29"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,39L108,39"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,49L108,49"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,59L108,59"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,69L108,69"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,79L108,79"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,89L108,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M0,99L108,99"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,29L89,29"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,39L89,39"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,49L89,49"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,59L89,59"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,69L89,69"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M19,79L89,79"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M29,19L29,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M39,19L39,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M49,19L49,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M59,19L59,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M69,19L69,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
    <path android:fillColor="#00000000" android:pathData="M79,19L79,89"
          android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
</vector>

--- Fichier : mobile\src\main\res\drawable\ic_module.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp" android:height="24dp"
    android:viewportWidth="24" android:viewportHeight="24">
    <path
        android:fillColor="#FF000000"
        android:pathData="M10.5,6C9.67,6 9,6.67 9,7.5S9.67,9 10.5,9 12,8.33 12,7.5 11.33,6 10.5,6zM19,3H5c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2V5c0,-1.1 -0.9,-2 -2,-2zM5,19V5h14v14H5z"/>
</vector>

--- Fichier : mobile\src\main\res\drawable\ic_settings.xml ---

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp" android:height="24dp"
    android:viewportWidth="24" android:viewportHeight="24">
    <path
        android:fillColor="#FF000000"
        android:pathData="M19.43,12.98c0.04,-0.32 0.07,-0.66 0.07,-0.98s-0.03,-0.66 -0.07,-0.98l2.11,-1.65c0.19,-0.15 0.24,-0.42 0.12,-0.64l-2,-3.46c-0.12,-0.22 -0.39,-0.3 -0.61,-0.22l-2.49,1c-0.52,-0.4 -1.08,-0.73 -1.69,-0.98L14.5,2.5c-0.03,-0.24 -0.24,-0.43 -0.5,-0.43h-4c-0.26,0 -0.47,0.19 -0.5,0.43L9.05,5.06C8.44,5.31 7.88,5.64 7.36,6.04L4.87,5.04c-0.23,-0.09 -0.49,0 -0.61,0.22l-2,3.46c-0.12,0.22 -0.07,0.49 0.12,0.64l2.11,1.65C4.03,11.34 4,11.66 4,12s0.03,0.66 0.07,0.98l-2.11,1.65c-0.19,0.15 -0.24,0.42 -0.12,0.64l2,3.46c0.12,0.22 0.39,0.3 0.61,0.22l2.49,-1c0.52,0.4 1.08,0.73 1.69,0.98l0.45,2.56c0.03,0.24 0.24,0.43 0.5,0.43h4c0.26,0 0.47,-0.19 0.5,-0.43l0.45,-2.56c0.61,-0.25 1.17,-0.58 1.69,-0.98l2.49,1c0.23,0.09 0.49,0 0.61,-0.22l2,-3.46c0.12,-0.22 0.07,-0.49 -0.12,-0.64l-2.11,-1.65zM12,15.5c-1.93,0 -3.5,-1.57 -3.5,-3.5s1.57,-3.5 3.5,-3.5 3.5,1.57 3.5,3.5 -1.57,3.5 -3.5,3.5z"/>
</vector>

--- Fichier : mobile\src\main\res\layout\activity_main.xml ---

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="?attr/colorSurface"
    tools:context=".MainActivity"
    android:fitsSystemWindows="true">

    <!-- Toolbar -->
    <com.google.android.material.appbar.MaterialToolbar
        android:id="@+id/mainToolbar"
        android:layout_width="match_parent"
        android:layout_height="?attr/actionBarSize"
        android:background="?attr/colorPrimary"
        android:title="@string/app_name"
        android:titleTextColor="?attr/colorOnPrimary" />

    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:fillViewport="true"
        android:scrollbars="vertical">

        <LinearLayout
            android:orientation="vertical"
            android:padding="16dp"
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <!-- Boutons Connect / Lire VIN / Lire PIN -->
            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal"
                android:gravity="center"
                android:weightSum="3"
                android:layout_marginTop="8dp">

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/connectButton"
                    style="@style/Widget.PsaImmoTool.Button"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="@string/button_connect" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/requestVinButton"
                    style="@style/Widget.PsaImmoTool.Button"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:layout_marginStart="8dp"
                    android:text="@string/button_request_vin" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/requestPinButton"
                    style="@style/Widget.PsaImmoTool.Button"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:layout_marginStart="8dp"
                    android:text="@string/button_request_pin" />
            </LinearLayout>

            <!-- Bouton CAN Listen -->
            <com.google.android.material.button.MaterialButton
                android:id="@+id/startCanListenButton"
                style="@style/Widget.PsaImmoTool.Button"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:text="@string/button_start_can_listen" />

            <!-- Input Frame -->
            <com.google.android.material.textfield.TextInputLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:hint="@string/hint_input_frame">

                <com.google.android.material.textfield.TextInputEditText
                    android:id="@+id/inputFrameText"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:inputType="text" />
            </com.google.android.material.textfield.TextInputLayout>

            <com.google.android.material.button.MaterialButton
                android:id="@+id/sendFrameButton"
                style="@style/Widget.PsaImmoTool.Button"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:text="@string/button_send_frame" />

            <!-- Status -->
            <TextView
                android:id="@+id/statusText"
                style="@style/Widget.PsaImmoTool.TextView"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:paddingTop="12dp"
                android:text="@string/status_disconnected"
                android:textStyle="bold"
                android:textColor="?attr/colorError" />

            <!-- Logs -->
            <TextView
                android:id="@+id/outputText"
                style="@style/Widget.PsaImmoTool.TextView"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:paddingTop="8dp"
                android:lineSpacingExtra="4dp" />

            <!-- Boutons Log : alignÃ©s sur une ligne -->
            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal"
                android:gravity="center"
                android:weightSum="3"
                android:layout_marginTop="8dp">

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/exportLogsButton"
                    style="@style/Widget.PsaImmoTool.Button.Outlined"
                    android:layout_width="0dp"
                    android:layout_weight="1"
                    android:layout_height="wrap_content"
                    android:text="@string/button_export_logs" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/clearLogsButton"
                    style="@style/Widget.PsaImmoTool.Button.Outlined"
                    android:layout_width="0dp"
                    android:layout_weight="1"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="8dp"
                    android:text="@string/button_clear_logs" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/generateReportButton"
                    style="@style/Widget.PsaImmoTool.Button.Outlined"
                    android:layout_width="0dp"
                    android:layout_weight="1"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="8dp"
                    android:text="@string/button_generate_report" />

            </LinearLayout>

        </LinearLayout>
    </androidx.core.widget.NestedScrollView>
</LinearLayout>

--- Fichier : mobile\src\main\res\layout\activity_vehicle_editor.xml ---

<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="?attr/colorSurface"
    android:padding="16dp">

    <LinearLayout
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <!-- Brand -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/label_brand"
            android:layout_marginBottom="8dp">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/editBrand"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textCapWords" />
        </com.google.android.material.textfield.TextInputLayout>

        <!-- Model -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/label_model"
            android:layout_marginBottom="8dp">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/editModel"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textCapWords" />
        </com.google.android.material.textfield.TextInputLayout>

        <!-- Year -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/label_year"
            android:layout_marginBottom="8dp">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/editYear"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="number" />
        </com.google.android.material.textfield.TextInputLayout>

        <!-- App Key -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/label_app_key"
            android:layout_marginBottom="16dp">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/editAppKey"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textPassword" />
        </com.google.android.material.textfield.TextInputLayout>

        <!-- Capabilities -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/capabilities_label"
            android:textStyle="bold"
            android:paddingBottom="4dp"
            android:textColor="?attr/colorOnSurface" />

        <CheckBox
            android:id="@+id/checkCan"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/label_can"
            android:textColor="?attr/colorOnSurface" />

        <CheckBox
            android:id="@+id/checkObd2"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/label_obd2"
            android:textColor="?attr/colorOnSurface" />

        <CheckBox
            android:id="@+id/checkKLine"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/label_kline"
            android:textColor="?attr/colorOnSurface" />

        <!-- Module selection -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/add_module_label"
            android:textStyle="bold"
            android:paddingTop="12dp"
            android:paddingBottom="4dp"
            android:textColor="?attr/colorOnSurface" />

        <Spinner
            android:id="@+id/moduleSpinner"
            android:layout_width="match_parent"
            android:layout_height="wrap_content" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/addModuleButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/btn_add_module"
            android:layout_marginTop="8dp"
            style="@style/Widget.PsaImmoTool.Button" />

        <!-- Liste des modules -->
        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/recyclerModules"
            android:layout_width="match_parent"
            android:layout_height="200dp"
            android:layout_marginTop="12dp" />

        <!-- Boutons Save & Cancel sur la mÃªme ligne -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:orientation="horizontal"
            android:gravity="end">

            <com.google.android.material.button.MaterialButton
                android:id="@+id/buttonCancelConfig"
                style="@style/Widget.PsaImmoTool.Button.Outlined"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/button_cancel"
                android:layout_marginEnd="8dp" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/saveButton"
                style="@style/Widget.PsaImmoTool.Button"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/btn_save_vehicle" />
        </LinearLayout>

        <!-- Status -->
        <TextView
            android:id="@+id/statusText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="#444"
            android:paddingTop="10dp" />

    </LinearLayout>
</ScrollView>

--- Fichier : mobile\src\main\res\layout\fragment_diagnostics.xml ---

<?xml version="1.0" encoding="utf-8"?>
<androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/mainScroll"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true"
    android:scrollbars="vertical">

    <LinearLayout
        android:orientation="vertical"
        android:padding="16dp"
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <!-- NOTE: pas de moduleSelector ici, la sÃ©lection se fait par le menu -->

        <!-- SÃ©lecteur Bluetooth -->
        <Spinner
            android:id="@+id/bluetoothDeviceSpinner"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp"
            android:visibility="gone" />

        <!-- Boutons -->
        <Button
            android:id="@+id/connectButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/button_connect"
            android:layout_marginTop="8dp" />

        <Button
            android:id="@+id/requestVinButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/button_request_vin"
            android:layout_marginTop="8dp" />

        <Button
            android:id="@+id/requestPinButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/button_request_pin"
            android:layout_marginTop="8dp" />

        <Button
            android:id="@+id/startCanListenButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/button_start_can_listen"
            android:layout_marginTop="8dp" />

        <!-- Input frame -->
        <EditText
            android:id="@+id/inputFrameText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:hint="@string/hint_input_frame"
            android:inputType="text"
            android:layout_marginTop="8dp" />

        <Button
            android:id="@+id/sendFrameButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/button_send_frame"
            android:layout_marginTop="8dp" />

        <!-- Status -->
        <TextView
            android:id="@+id/statusText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:paddingTop="12dp"
            android:text="@string/status_disconnected"
            android:textColor="@android:color/holo_red_dark"
            android:textSize="16sp"
            android:textStyle="bold" />

        <!-- Output Logs -->
        <TextView
            android:id="@+id/outputText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:lineSpacingExtra="4dp"
            android:paddingTop="8dp"
            android:text=""
            android:textSize="14sp" />

        <!-- Logs -->
        <Button
            android:id="@+id/exportLogsButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:text="@string/button_export_logs" />

        <Button
            android:id="@+id/clearLogsButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:text="@string/button_clear_logs" />

        <Button
            android:id="@+id/generateReportButton"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="@string/button_generate_report"
            android:layout_marginTop="8dp" />

    </LinearLayout>
</androidx.core.widget.NestedScrollView>

--- Fichier : mobile\src\main\res\layout\item_can_log.xml ---

<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginVertical="4dp"
    android:layout_marginHorizontal="8dp"
    android:padding="8dp"
    android:elevation="2dp"
    android:background="?attr/colorSurface">

    <TextView
        android:id="@+id/logText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="?attr/colorOnSurface"
        android:textSize="14sp"
        android:lineSpacingExtra="2dp" />
</com.google.android.material.card.MaterialCardView>

--- Fichier : mobile\src\main\res\layout-land\activity_main.xml ---

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:orientation="horizontal"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="?attr/colorSurface"
    tools:context=".MainActivity"
    android:fitsSystemWindows="true">

    <!-- Toolbar en haut -->
    <com.google.android.material.appbar.MaterialToolbar
        android:id="@+id/mainToolbar"
        android:layout_width="match_parent"
        android:layout_height="?attr/actionBarSize"
        android:background="?attr/colorPrimary"
        android:title="@string/app_name"
        android:titleTextColor="?attr/colorOnPrimary"
        android:layout_gravity="top" />

    <!-- Zone boutons gauche -->
    <LinearLayout
        android:orientation="vertical"
        android:padding="16dp"
        android:layout_width="0dp"
        android:layout_height="match_parent"
        android:layout_weight="1">

        <!-- Boutons principaux alignÃ©s -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center"
            android:weightSum="3">

            <com.google.android.material.button.MaterialButton
                android:id="@+id/connectButton"
                style="@style/Widget.PsaImmoTool.Button"
                android:layout_width="0dp"
                android:layout_weight="1"
                android:layout_height="wrap_content"
                android:text="@string/button_connect" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/requestVinButton"
                style="@style/Widget.PsaImmoTool.Button"
                android:layout_width="0dp"
                android:layout_weight="1"
                android:layout_height="wrap_content"
                android:layout_marginStart="8dp"
                android:text="@string/button_request_vin" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/requestPinButton"
                style="@style/Widget.PsaImmoTool.Button"
                android:layout_width="0dp"
                android:layout_weight="1"
                android:layout_height="wrap_content"
                android:layout_marginStart="8dp"
                android:text="@string/button_request_pin" />
        </LinearLayout>

        <!-- Bouton CAN Listen -->
        <com.google.android.material.button.MaterialButton
            android:id="@+id/startCanListenButton"
            style="@style/Widget.PsaImmoTool.Button"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:text="@string/button_start_can_listen" />

        <!-- Input Frame -->
        <com.google.android.material.textfield.TextInputLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:hint="@string/hint_input_frame">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/inputFrameText"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="text" />
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.button.MaterialButton
            android:id="@+id/sendFrameButton"
            style="@style/Widget.PsaImmoTool.Button"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:text="@string/button_send_frame" />

    </LinearLayout>

    <!-- Zone logs droite -->
    <LinearLayout
        android:orientation="vertical"
        android:padding="16dp"
        android:layout_width="0dp"
        android:layout_height="match_parent"
        android:layout_weight="1">

        <!-- Status -->
        <TextView
            android:id="@+id/statusText"
            style="@style/Widget.PsaImmoTool.TextView"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:paddingTop="12dp"
            android:text="@string/status_disconnected"
            android:textStyle="bold"
            android:textColor="?attr/colorError" />

        <!-- Logs -->
        <TextView
            android:id="@+id/outputText"
            style="@style/Widget.PsaImmoTool.TextView"
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:layout_weight="1"
            android:paddingTop="8dp"
            android:lineSpacingExtra="4dp" />

        <!-- Boutons logs -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center"
            android:weightSum="3"
            android:layout_marginTop="8dp">

            <com.google.android.material.button.MaterialButton
                android:id="@+id/exportLogsButton"
                style="@style/Widget.PsaImmoTool.Button.Outlined"
                android:layout_width="0dp"
                android:layout_weight="1"
                android:layout_height="wrap_content"
                android:text="@string/button_export_logs" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/clearLogsButton"
                style="@style/Widget.PsaImmoTool.Button.Outlined"
                android:layout_width="0dp"
                android:layout_weight="1"
                android:layout_height="wrap_content"
                android:layout_marginStart="8dp"
                android:text="@string/button_clear_logs" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/generateReportButton"
                style="@style/Widget.PsaImmoTool.Button.Outlined"
                android:layout_width="0dp"
                android:layout_weight="1"
                android:layout_height="wrap_content"
                android:layout_marginStart="8dp"
                android:text="@string/button_generate_report" />
        </LinearLayout>

    </LinearLayout>
</LinearLayout>

--- Fichier : mobile\src\main\res\layout-land\activity_vehicle_editor.xml ---

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:baselineAligned="false"
    android:orientation="horizontal"
    android:background="?attr/colorSurface"
    android:padding="16dp"
    tools:ignore="MissingDefaultResource">

    <!-- Colonne gauche : Infos vÃ©hicule -->
    <ScrollView
        android:layout_width="0dp"
        android:layout_height="match_parent"
        android:layout_weight="1"
        android:paddingEnd="8dp">

        <LinearLayout
            android:orientation="vertical"
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <!-- Brand -->
            <com.google.android.material.textfield.TextInputLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/label_brand"
                android:layout_marginBottom="8dp">

                <com.google.android.material.textfield.TextInputEditText
                    android:id="@+id/editBrand"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:inputType="textCapWords" />
            </com.google.android.material.textfield.TextInputLayout>

            <!-- Model -->
            <com.google.android.material.textfield.TextInputLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/label_model"
                android:layout_marginBottom="8dp">

                <com.google.android.material.textfield.TextInputEditText
                    android:id="@+id/editModel"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:inputType="textCapWords" />
            </com.google.android.material.textfield.TextInputLayout>

            <!-- Year -->
            <com.google.android.material.textfield.TextInputLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/label_year"
                android:layout_marginBottom="8dp">

                <com.google.android.material.textfield.TextInputEditText
                    android:id="@+id/editYear"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:inputType="number" />
            </com.google.android.material.textfield.TextInputLayout>

            <!-- App Key -->
            <com.google.android.material.textfield.TextInputLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:hint="@string/label_app_key"
                android:layout_marginBottom="16dp">

                <com.google.android.material.textfield.TextInputEditText
                    android:id="@+id/editAppKey"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:inputType="textPassword" />
            </com.google.android.material.textfield.TextInputLayout>

            <!-- Capabilities -->
            <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/capabilities_label"
                android:textStyle="bold"
                android:paddingBottom="4dp"
                android:textColor="?attr/colorOnSurface" />

            <CheckBox
                android:id="@+id/checkCan"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_can"
                android:textColor="?attr/colorOnSurface" />

            <CheckBox
                android:id="@+id/checkObd2"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_obd2"
                android:textColor="?attr/colorOnSurface" />

            <CheckBox
                android:id="@+id/checkKLine"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/label_kline"
                android:textColor="?attr/colorOnSurface" />

        </LinearLayout>
    </ScrollView>

    <!-- Colonne droite : Modules et actions -->
    <LinearLayout
        android:orientation="vertical"
        android:layout_width="0dp"
        android:layout_height="match_parent"
        android:layout_weight="1"
        android:paddingStart="8dp">

        <!-- Module selection -->
        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/add_module_label"
            android:textStyle="bold"
            android:paddingBottom="4dp"
            android:textColor="?attr/colorOnSurface" />

        <Spinner
            android:id="@+id/moduleSpinner"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:minHeight="48dp" />

        <com.google.android.material.button.MaterialButton
            android:id="@+id/addModuleButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/btn_add_module"
            android:layout_marginTop="8dp"
            style="@style/Widget.PsaImmoTool.Button" />

        <!-- Liste des modules -->
        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/recyclerModules"
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:layout_weight="1"
            android:layout_marginTop="12dp" />

        <!-- Boutons Save & Cancel en bas alignÃ©s -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="16dp"
            android:orientation="horizontal"
            android:gravity="end">

            <com.google.android.material.button.MaterialButton
                android:id="@+id/buttonCancelConfig"
                style="@style/Widget.PsaImmoTool.Button.Outlined"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/button_cancel"
                android:layout_marginEnd="8dp" />

            <com.google.android.material.button.MaterialButton
                android:id="@+id/saveButton"
                style="@style/Widget.PsaImmoTool.Button"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/btn_save_vehicle" />
        </LinearLayout>

        <!-- Status -->
        <TextView
            android:id="@+id/statusText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:textColor="#444"
            android:paddingTop="10dp" />

    </LinearLayout>
</LinearLayout>

--- Fichier : mobile\src\main\res\layout-sw600dp\activity_main.xml ---

<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    android:background="?attr/colorSurface"
    tools:context=".MainActivity">

    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:fitsSystemWindows="true"
        android:theme="?attr/actionBarTheme">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/mainToolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:background="?attr/colorPrimary"
            android:titleTextColor="?attr/colorOnPrimary"
            app:title="@string/app_name" />
    </com.google.android.material.appbar.AppBarLayout>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_marginTop="?attr/actionBarSize"
        android:orientation="horizontal"
        android:padding="8dp"
        android:fitsSystemWindows="true"
        app:layout_behavior="@string/appbar_scrolling_view_behavior"
        android:baselineAligned="false">

        <!-- Colonne gauche : Boutons -->
        <ScrollView
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:padding="8dp">

            <LinearLayout
                android:orientation="vertical"
                android:layout_width="match_parent"
                android:layout_height="wrap_content">


                <com.google.android.material.button.MaterialButton
                    android:id="@+id/connectButton"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/button_connect"
                    android:layout_marginTop="8dp" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/requestVinButton"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/button_request_vin"
                    android:layout_marginTop="8dp" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/requestPinButton"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/button_request_pin"
                    android:layout_marginTop="8dp" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/startCanListenButton"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/button_start_can_listen"
                    android:layout_marginTop="8dp" />

                <com.google.android.material.textfield.TextInputLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_marginTop="8dp"
                    android:hint="@string/hint_input_frame">

                    <com.google.android.material.textfield.TextInputEditText
                        android:id="@+id/inputFrameText"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:inputType="text" />
                </com.google.android.material.textfield.TextInputLayout>

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/sendFrameButton"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/button_send_frame"
                    android:layout_marginTop="8dp" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/exportLogsButton"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/button_export_logs"
                    android:layout_marginTop="8dp" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/clearLogsButton"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/button_clear_logs"
                    android:layout_marginTop="8dp" />

                <com.google.android.material.button.MaterialButton
                    android:id="@+id/generateReportButton"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/button_generate_report"
                    android:layout_marginTop="8dp" />

            </LinearLayout>
        </ScrollView>

        <!-- Colonne droite : Logs -->
        <LinearLayout
            android:orientation="vertical"
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_weight="2"
            android:paddingStart="16dp">

            <TextView
                android:id="@+id/statusText"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:paddingTop="12dp"
                android:text="@string/status_disconnected"
                android:textSize="16sp"
                android:textStyle="bold"
                android:textColor="?attr/colorError" />

            <TextView
                android:id="@+id/outputText"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:paddingTop="8dp"
                android:textSize="14sp"
                android:lineSpacingExtra="4dp"
                android:textColor="?attr/colorOnSurface" />

        </LinearLayout>

    </LinearLayout>
</androidx.coordinatorlayout.widget.CoordinatorLayout>

--- Fichier : mobile\src\main\res\menu\menu_main.xml ---

<menu xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:android="http://schemas.android.com/apk/res/android"
    tools:ignore="ExtraText">

    <!-- SÃ©lection du vÃ©hicule -->
    <item
        android:id="@+id/menu_select_vehicle"
        android:title="@string/select_vehicle"
        android:icon="@drawable/ic_car"
        app:showAsAction="never" />

    <!-- SÃ©lection du module -->
    <item
        android:id="@+id/menu_select_module"
        android:title="@string/select_module"
    android:icon="@drawable/ic_module"
        app:showAsAction="never" />

    <!-- ParamÃ¨tres -->
    <item
        android:id="@+id/menu_settings"
        android:title="@string/menu_settings"
    android:icon="@drawable/ic_settings"
        app:showAsAction="never" />

    <!-- Quitter -->
    <item
        android:id="@+id/menu_quit"
        android:title="@string/menu_quit"
     android:icon="@drawable/ic_exit"
        app:showAsAction="never" />

</menu>

--- Fichier : mobile\src\main\res\mipmap-anydpi-v26\ic_launcher.xml ---

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>

--- Fichier : mobile\src\main\res\mipmap-anydpi-v26\ic_launcher_round.xml ---

<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background"/>
    <foreground android:drawable="@mipmap/ic_launcher_foreground"/>
</adaptive-icon>

--- Fichier : mobile\src\main\res\values\arrays.xml ---

<resources>

    <string-array name="brand_list">
        <item>@string/brand_peugeot</item>
        <item>@string/brand_ford</item>
        <item>@string/brand_mg</item>
        <item>@string/brand_ducati</item>
        <item>@string/brand_toyota</item>
    </string-array>

    <string-array name="peugeot_models">
        <item>@string/model_207</item>
        <item>@string/model_307</item>
    </string-array>

    <string-array name="ford_models">
        <item>@string/model_mustang_mache</item>
        <item>@string/model_mustang_series</item>
        <item>@string/model_kuga</item>
        <item>@string/model_puma</item>
        <item>@string/model_fiesta</item>
    </string-array>

    <string-array name="mg_models">
        <item>@string/model_3</item>
        <item>@string/model_4</item>
        <item>@string/model_marvel_r</item>
    </string-array>

    <string-array name="ducati_models">
        <item>@string/model_848</item>
        <item>@string/model_1098</item>
        <item>@string/model_1198</item>
    </string-array>

    <string-array name="toyota_models">
        <item>@string/model_corolla</item>
    </string-array>

    <string-array name="module_list">
        <item>OBD2 (USB)</item>
        <item>OBD2 (Bluetooth)</item>
        <item>K-Line (USB)</item>
        <item>CANBUS (USB)</item>
        <item>CANBUS (UART)</item>
        <item>CAN (Demo)</item>
    </string-array>

</resources>

--- Fichier : mobile\src\main\res\values\colors.xml ---

<resources>
    <color name="purple_200">#BB86FC</color>
    <color name="white">#FFFFFF</color>
    <color name="black">#000000</color>
    <color name="purple_500">#3F3D56</color> <!-- un violet/gris plus doux -->
    <color name="purple_700">#2C2A40</color> <!-- variante sombre -->
    <color name="teal_200">#03DAC5</color>
</resources>

--- Fichier : mobile\src\main\res\values\ic_launcher_background.xml ---

<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="ic_launcher_background">#FFFFFF</color>
</resources>

--- Fichier : mobile\src\main\res\values\strings.xml ---

<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Application -->
    <string name="app_name">PSA Immo Tool</string>

    <!-- Menus -->
    <string name="menu_vehicle">Vehicle</string>
    <string name="menu_theme">Theme</string>
    <string name="menu_language">Language</string>
    <string name="menu_quit">Quit</string>
    <string name="menu_vehicle_editor">Vehicle Editor</string>
    <string name="theme_light">Light</string>
    <string name="theme_dark">Dark</string>
    <string name="lang_fr">French</string>
    <string name="lang_en">English</string>

    <!-- Brands -->
    <string name="brand_peugeot">Peugeot</string>
    <string name="brand_ford">Ford</string>
    <string name="brand_mg">MG</string>
    <string name="brand_ducati">Ducati</string>
    <string name="brand_toyota">Toyota</string>

    <!-- Models -->
    <string name="model_207">207</string>
    <string name="model_307">307</string>
    <string name="model_mustang_mache">Mustang Mach-E</string>
    <string name="model_mustang_series">Mustang (2000+)</string>
    <string name="model_kuga">Kuga</string>
    <string name="model_puma">Puma</string>
    <string name="model_fiesta">Fiesta</string>
    <string name="model_3">3</string>
    <string name="model_4">4</string>
    <string name="model_marvel_r">Marvel R</string>
    <string name="model_848">848</string>
    <string name="model_1098">1098</string>
    <string name="model_1198">1198</string>
    <string name="model_corolla">Corolla</string>

    <!-- Logs & status -->
    <string name="logs_cleared">ðŸ§¹ Logs cleared</string>
    <string name="storage_permission_required">ðŸ“› Storage permission required to export logs</string>
    <string name="log_saved_success">ðŸ“ Log saved to: %1$s</string>
    <string name="log_saved_error">âŒ Error saving log: %1$s</string>

    <!-- Report -->
    <string name="report_header">ðŸ§¾ Diagnostic Report</string>
    <string name="report_date">Date:</string>
    <string name="report_vehicle">Vehicle</string>
    <string name="report_module">Module:</string>
    <string name="report_connection">Connection:</string>
    <string name="report_pid_section">ðŸ“Š PID Data:</string>
    <string name="report_dtc_section">ðŸ’¥ DTCs:</string>
    <string name="report_logs_section">ðŸ“œ Logs:</string>
    <string name="report_saved">ðŸ’¾ Report saved: %1$s</string>
    <string name="report_error">âŒ Error saving report: %1$s</string>
    <string name="module_unknown">Unknown</string>
    <string name="connection_success">Connection successful</string>
    <string name="connection_failed">Connection failed</string>

    <!-- FrameInterpreter -->
    <string name="vin_received">ðŸ” VIN: %1$s</string>
    <string name="pin_received">ðŸ”‘ PIN Code: %1$s</string>
    <string name="voltage_read">ðŸ”‹ Battery voltage: %1$.1f V</string>
    <string name="temperature_read">ðŸŒ¡ Engine temperature: %1$d Â°C</string>
    <string name="dtc_found">ðŸ’¥ DTCs found: %1$s</string>
    <string name="seed_received">ðŸ§¬ Seed received: %1$s</string>
    <string name="unknown_frame_response">â” Frame received but not interpreted</string>
    <!-- Modules -->
    <string name="module_obd2_usb">OBD2 (USB)</string>
    <string name="module_obd2_bluetooth">OBD2 (Bluetooth)</string>
    <string name="module_kline_usb">K-Line (USB)</string>
    <string name="module_canbus">CANBUS (USB)</string>
    <string name="module_canbus_uart">CANBUS (UART)</string>
    <string name="module_can_demo">CANBUS (Demo)</string>

    <!-- activity_main -->
    <string name="label_module">Module:</string>
    <string name="label_bluetooth_device">Bluetooth Device:</string>
    <string name="label_input_frame">Custom Frame:</string>
    <string name="button_connect">Connect</string>
    <string name="button_request_vin">Read VIN</string>
    <string name="button_request_pin">Read PIN</string>
    <string name="button_start_can_listen">Start CAN Listening</string>
    <string name="button_send_frame">Send</string>
    <string name="button_export_logs">Export Logs</string>
    <string name="button_clear_logs">Clear</string>
    <string name="button_generate_report">Generate Report</string>
    <string name="status_disconnected">Disconnected</string>
    <string name="status_connected">Connected</string>
    <string name="no_bluetooth_device">âš ï¸ No Bluetooth device selected</string>
    <string name="connected_to">ðŸ”— Connected to %1$s</string>
    <string name="connection_failed_bt">âŒ Bluetooth connection failed</string>
    <string name="no_module_connected">âŒ No module connected</string>
    <string name="error_sending_frame">âŒ Error sending frame</string>
    <string name="start_listening_not_applicable">âš ï¸ This module does not support CAN listening</string>
    <string name="usb_connection_failed">âŒ USB connection failed</string>
    <string name="frame_sent">âž¡ï¸ Frame sent: %1$s</string>
    <string name="frame_received">â¬…ï¸ Frame received: %1$s</string>
    <string name="frame_decoded">âœ… Frame decoded: %1$s</string>
    <string name="no_usb_found">âš ï¸ No USB device found</string>
    <string name="error_usb_permission">âŒ USB permission denied</string>
    <string name="can_connected">ðŸ”Œ CAN connected</string>
    <string name="can_disconnected">âŒ CAN disconnected</string>
    <string name="can_listening_started">ðŸŽ§ CAN listening started</string>
    <string name="pin_step_session">ðŸ” Starting security sessionâ€¦</string>
    <string name="pin_step_seed_received">ðŸ§¬ Seed received: %1$s</string>
    <string name="pin_step_key_sent">ðŸ”‘ Key sent: %1$s</string>
    <string name="pin_step_unlocked">ðŸ”“ Security access granted</string>
    <string name="pin_step_no_key_algo">âŒ No key algorithm available for this vehicle</string>
    <string name="select_vehicle">Select vehicle</string>
    <string name="report_capabilities">Capabilities:</string>
    <string name="report_modules">Compatible modules:</string>
    <string name="no_key_algo_for_vehicle">No key algorithm known for selected vehicle</string>
    <string name="pin_algo_present">PIN key algorithm: âœ… yes</string>
    <string name="pin_algo_absent">PIN key algorithm: âŒ no</string>
    <string name="report_seed_received">Last seed received: %1$s</string>
    <string name="report_key_calculated">Key calculated: %1$s</string>
    <!-- Vehicle Editor -->
    <string name="label_brand">Brand (e.g., Peugeot)</string>
    <string name="label_model">Model (e.g., 207)</string>
    <string name="label_year">Year (e.g., 2008)</string>
    <string name="label_app_key">AppKey (e.g., D91C)</string>
    <string name="btn_save_vehicle">Save</string>
    <string name="vehicle_saved" tools:ignore="PluralsCandidate">Vehicle %1$s %2$s %3$d saved successfully</string>
    <string name="invalid_vehicle_data">Please fill in all fields correctly</string>
    <string name="simulated_frame_received">Simulated frame received : %1$s</string>
    <string name="hint_input_frame">Enter a custom CAN/OBD2 frame</string>
    <string name="capabilities_label">Available capabilities:</string>
    <string name="label_can">CAN</string>
    <string name="label_obd2">OBD2</string>
    <string name="label_kline">K-Line</string>
    <string name="add_module_label">Add a compatible module:</string>
    <string name="btn_add_module">Add module</string>
    <string name="bluetooth_not_supported">âŒ Bluetooth not supported on this device</string>
    <string name="no_paired_bt_devices">âš ï¸ No paired Bluetooth devices found</string>
    <string name="unknown_device">Unknown device</string>
    <string name="bluetooth_scanning">ðŸ” Scanning for Bluetooth devicesâ€¦</string>
    <string name="bt_discovery_started">Bluetooth device discovery startedâ€¦</string>
    <string name="bt_discovery_finished">Bluetooth discovery completed.</string>

    <string name="menu_update">Update</string>

    <string name="update_current_version">Current version: %1$s</string>
    <string name="update_check">Check online</string>
    <string name="update_checking">Checking for updateâ€¦</string>
    <string name="update_got_version">Remote version: %1$s</string>
    <string name="update_latest_title">Up to date</string>
    <string name="update_latest">You already run the latest version (%1$s)</string>
    <string name="update_available_title">Update available</string>
    <string name="update_available">A new version (%1$s) is available. Download now?</string>
    <string name="update_download">Download</string>
    <string name="update_error_title">Update error</string>
    <string name="update_error_fetch">Unable to fetch remote version</string>
    <string name="update_downloading">Downloading APKâ€¦</string>
    <string name="update_parse_error_fallback">The downloaded file seems invalid. Open the browser to download and install manually?</string>
    <string name="update_open_browser">Open browser</string>


    <!-- Nouveau -->
    <string name="menu_modules">Modules</string>
    <string name="menu_settings">Settings</string>

    <string name="pref_autoscroll_title">Log Auto-scroll</string>
    <string name="pref_autoscroll_on">The log scrolls automatically to the bottom</string>
    <string name="pref_autoscroll_off">The log no longer scrolls automatically</string>

    <string name="select_module">Select Module</string>
    <string name="bluetooth_devices">Bluetooth Devices</string>

    <string name="pref_title_theme">Theme</string>
    <string name="pref_title_language">Language</string>
    <string name="pref_title_autoscroll">Auto-scroll logs</string>
    <string name="pref_title_vehicle_editor">Vehicle Editor</string>
    <string name="pref_title_update">Check for Updates</string>
    <string name="pref_version_summary">App Version</string>

    <string-array name="theme_entries">
        <item>System Default</item>
        <item>Light</item>
        <item>Dark</item>
    </string-array>
    <string-array name="theme_values">
        <item>system</item>
        <item>light</item>
        <item>dark</item>
    </string-array>

    <string-array name="lang_entries">
        <item>English</item>
        <item>French</item>
    </string-array>
    <string-array name="lang_values">
        <item>en</item>
        <item>fr</item>
    </string-array>

    <!-- Update -->
    <string name="update_title">Update Available</string>
    <string name="update_message">A new version %1$s is available. Do you want to install it?</string>
    <string name="update_error_check">âŒ Failed to check for update.</string>
    <string name="update_download_failed">âŒ Download failed.</string>
    <string name="update_open_browser_failed">âŒ Could not open installer. Try manually via browser.</string>
    <string name="update_latest_version">âœ… You already have the latest version (%1$s).</string>

    <string name="category_settings">Settings</string>
    <string name="category_update">Update</string>
    <string name="setting_check_update">Check for update</string>
    <string name="setting_check_update_summary">Verify if a newer version is available</string>
    <string name="setting_current_version">Current version</string>
    <string name="settings_vehicle_editor_summary">Add or edit supported vehicles</string>
    <string name="settings_category_general">General</string>
    <string name="settings_category_app">Application</string>
    <string name="permission_bt_required">Bluetooth access permission is required. Please enable it in the settings.</string>
    <string name="enable_location">Please enable location services to detect Bluetooth devices.</string>
    <string name="permission_denied">Some permissions were denied. The app may not function correctly.</string>
    <string name="button_cancel">Cancel</string>
    <string name="button_disconnect">Disconnect</string>
    <string name="select_brand">Select a brand</string>
    <string name="select_model">Select a model</string>
    <string name="select_year">Select a year</string>
    <string name="vehicle_selected">%1$s %2$s %3$d selected</string>
    <string name="usb_can_connected">âœ… Simulated USB CAN connected</string>
    <string name="usb_can_disconnected">ðŸ›‘ Simulated USB CAN disconnected</string>
    <string name="usb_can_send">ðŸ§ª [Simulated CAN] Sending: %1$s</string>
    <string name="usb_can_listen_started">ðŸ‘‚ Simulated CAN listening started</string>
    <string name="requesting_vin_dtc">Request VIN and DTC sendâ€¦</string>


</resources>

--- Fichier : mobile\src\main\res\values\styles.xml ---

<resources>

    <!-- Boutons principaux -->
    <style name="Widget.PsaImmoTool.Button" parent="Widget.Material3.Button">
        <item name="android:layout_margin">8dp</item>
        <item name="android:minHeight">48dp</item>
        <item name="android:fontFamily">sans-serif</item>
        <item name="android:textAllCaps">false</item>
        <item name="android:textSize">16sp</item>
    </style>

    <!-- Boutons secondaires (outlined) -->
    <style name="Widget.PsaImmoTool.Button.Outlined" parent="Widget.Material3.Button.OutlinedButton">
        <item name="android:layout_margin">8dp</item>
        <item name="android:minHeight">48dp</item>
        <item name="android:fontFamily">sans-serif</item>
        <item name="android:textAllCaps">false</item>
        <item name="android:textSize">16sp</item>
    </style>

    <!-- TextView -->
    <style name="Widget.PsaImmoTool.TextView" parent="TextAppearance.Material3.BodyLarge">
        <item name="android:fontFamily">sans-serif</item>
        <item name="android:textSize">14sp</item>
        <item name="android:lineSpacingExtra">4dp</item>
        <item name="android:textColor">?attr/colorOnSurface</item>
    </style>

</resources>

--- Fichier : mobile\src\main\res\values\themes.xml ---

<resources>
    <style name="Theme.PsaImmTool" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <item name="android:statusBarColor">@color/purple_700</item>
        <item name="android:windowTranslucentStatus">false</item>
        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
    </style>
    <style name="Theme.PsaImmoTool" parent="Theme.Material3.DayNight.NoActionBar">
        <!-- Couleurs principales -->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorOnPrimary">@color/white</item>
        <item name="colorSecondary">@color/purple_200</item>
        <item name="colorSurface">@color/white</item>
        <item name="colorOnSurface">@color/black</item>
        <item name="android:statusBarColor">@color/purple_700</item>
        <item name="android:navigationBarColor">@color/purple_700</item>
        <item name="android:windowLightStatusBar">false</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
    </style>

</resources>

--- Fichier : mobile\src\main\res\values-en\strings.xml ---

<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Application -->
    <string name="app_name">PSA Immo Tool</string>

    <!-- Menus -->
    <string name="menu_vehicle">Vehicle</string>
    <string name="menu_theme">Theme</string>
    <string name="menu_language">Language</string>
    <string name="menu_quit">Quit</string>
    <string name="menu_vehicle_editor">Vehicle Editor</string>
    <string name="theme_light">Light</string>
    <string name="theme_dark">Dark</string>
    <string name="lang_fr">French</string>
    <string name="lang_en">English</string>

    <!-- Brands -->
    <string name="brand_peugeot">Peugeot</string>
    <string name="brand_ford">Ford</string>
    <string name="brand_mg">MG</string>
    <string name="brand_ducati">Ducati</string>
    <string name="brand_toyota">Toyota</string>

    <!-- Models -->
    <string name="model_207">207</string>
    <string name="model_307">307</string>
    <string name="model_mustang_mache">Mustang Mach-E</string>
    <string name="model_mustang_series">Mustang (2000+)</string>
    <string name="model_kuga">Kuga</string>
    <string name="model_puma">Puma</string>
    <string name="model_fiesta">Fiesta</string>
    <string name="model_3">3</string>
    <string name="model_4">4</string>
    <string name="model_marvel_r">Marvel R</string>
    <string name="model_848">848</string>
    <string name="model_1098">1098</string>
    <string name="model_1198">1198</string>
    <string name="model_corolla">Corolla</string>

    <!-- Logs & status -->
    <string name="logs_cleared">ðŸ§¹ Logs cleared</string>
    <string name="storage_permission_required">ðŸ“› Storage permission required to export logs</string>
    <string name="log_saved_success">ðŸ“ Log saved to: %1$s</string>
    <string name="log_saved_error">âŒ Error saving log: %1$s</string>

    <!-- Report -->
    <string name="report_header">ðŸ§¾ Diagnostic Report</string>
    <string name="report_date">Date:</string>
    <string name="report_vehicle">Vehicle</string>
    <string name="report_module">Module:</string>
    <string name="report_connection">Connection:</string>
    <string name="report_pid_section">ðŸ“Š PID Data:</string>
    <string name="report_dtc_section">ðŸ’¥ DTCs:</string>
    <string name="report_logs_section">ðŸ“œ Logs:</string>
    <string name="report_saved">ðŸ’¾ Report saved: %1$s</string>
    <string name="report_error">âŒ Error saving report: %1$s</string>
    <string name="module_unknown">Unknown</string>
    <string name="connection_success">Connection successful</string>
    <string name="connection_failed">Connection failed</string>

    <!-- FrameInterpreter -->
    <string name="vin_received">ðŸ” VIN: %1$s</string>
    <string name="pin_received">ðŸ”‘ PIN Code: %1$s</string>
    <string name="voltage_read">ðŸ”‹ Battery voltage: %1$.1f V</string>
    <string name="temperature_read">ðŸŒ¡ Engine temperature: %1$d Â°C</string>
    <string name="dtc_found">ðŸ’¥ DTCs found: %1$s</string>
    <string name="seed_received">ðŸ§¬ Seed received: %1$s</string>
    <string name="unknown_frame_response">â” Frame received but not interpreted</string>
    <!-- Modules -->
    <string name="module_obd2_usb">OBD2 (USB)</string>
    <string name="module_obd2_bluetooth">OBD2 (Bluetooth)</string>
    <string name="module_kline_usb">K-Line (USB)</string>
    <string name="module_canbus">CANBUS (USB)</string>
    <string name="module_canbus_uart">CANBUS (UART)</string>
    <string name="module_can_demo">CANBUS (Demo)</string>

    <!-- activity_main -->
    <string name="label_module">Module:</string>
    <string name="label_bluetooth_device">Bluetooth Device:</string>
    <string name="label_input_frame">Custom Frame:</string>
    <string name="button_connect">Connect</string>
    <string name="button_request_vin">Read VIN</string>
    <string name="button_request_pin">Read PIN</string>
    <string name="button_start_can_listen">Start CAN Listening</string>
    <string name="button_send_frame">Send</string>
    <string name="button_export_logs">Export Logs</string>
    <string name="button_clear_logs">Clear</string>
    <string name="button_generate_report">Generate Report</string>
    <string name="status_disconnected">Disconnected</string>
    <string name="status_connected">Connected</string>
    <string name="no_bluetooth_device">âš ï¸ No Bluetooth device selected</string>
    <string name="connected_to">ðŸ”— Connected to %1$s</string>
    <string name="connection_failed_bt">âŒ Bluetooth connection failed</string>
    <string name="no_module_connected">âŒ No module connected</string>
    <string name="error_sending_frame">âŒ Error sending frame</string>
    <string name="start_listening_not_applicable">âš ï¸ This module does not support CAN listening</string>
    <string name="usb_connection_failed">âŒ USB connection failed</string>
    <string name="frame_sent">âž¡ï¸ Frame sent: %1$s</string>
    <string name="frame_received">â¬…ï¸ Frame received: %1$s</string>
    <string name="frame_decoded">âœ… Frame decoded: %1$s</string>
    <string name="no_usb_found">âš ï¸ No USB device found</string>
    <string name="error_usb_permission">âŒ USB permission denied</string>
    <string name="can_connected">ðŸ”Œ CAN connected</string>
    <string name="can_disconnected">âŒ CAN disconnected</string>
    <string name="can_listening_started">ðŸŽ§ CAN listening started</string>
    <string name="pin_step_session">ðŸ” Starting security sessionâ€¦</string>
    <string name="pin_step_seed_received">ðŸ§¬ Seed received: %1$s</string>
    <string name="pin_step_key_sent">ðŸ”‘ Key sent: %1$s</string>
    <string name="pin_step_unlocked">ðŸ”“ Security access granted</string>
    <string name="pin_step_no_key_algo">âŒ No key algorithm available for this vehicle</string>
    <string name="select_vehicle">Select vehicle</string>
    <string name="report_capabilities">Capabilities:</string>
    <string name="report_modules">Compatible modules:</string>
    <string name="no_key_algo_for_vehicle">No key algorithm known for selected vehicle</string>
    <string name="pin_algo_present">PIN key algorithm: âœ… yes</string>
    <string name="pin_algo_absent">PIN key algorithm: âŒ no</string>
    <string name="report_seed_received">Last seed received: %1$s</string>
    <string name="report_key_calculated">Key calculated: %1$s</string>
    <!-- Vehicle Editor -->
    <string name="label_brand">Brand (e.g., Peugeot)</string>
    <string name="label_model">Model (e.g., 207)</string>
    <string name="label_year">Year (e.g., 2008)</string>
    <string name="label_app_key">AppKey (e.g., D91C)</string>
    <string name="btn_save_vehicle">Save</string>
    <string name="vehicle_saved" tools:ignore="PluralsCandidate">Vehicle %1$s %2$s %3$d saved successfully</string>
    <string name="invalid_vehicle_data">Please fill in all fields correctly</string>
    <string name="simulated_frame_received">Simulated frame received : %1$s</string>
    <string name="hint_input_frame">Enter a custom CAN/OBD2 frame</string>
    <string name="capabilities_label">Available capabilities:</string>
    <string name="label_can">CAN</string>
    <string name="label_obd2">OBD2</string>
    <string name="label_kline">K-Line</string>
    <string name="add_module_label">Add a compatible module:</string>
    <string name="btn_add_module">Add module</string>
    <string name="bluetooth_not_supported">âŒ Bluetooth not supported on this device</string>
    <string name="no_paired_bt_devices">âš ï¸ No paired Bluetooth devices found</string>
    <string name="unknown_device">Unknown device</string>
    <string name="bluetooth_scanning">ðŸ” Scanning for Bluetooth devicesâ€¦</string>
    <string name="bt_discovery_started">Bluetooth device discovery startedâ€¦</string>
    <string name="bt_discovery_finished">Bluetooth discovery completed.</string>

    <string name="menu_update">Update</string>

    <string name="update_current_version">Current version: %1$s</string>
    <string name="update_check">Check online</string>
    <string name="update_checking">Checking for updateâ€¦</string>
    <string name="update_got_version">Remote version: %1$s</string>
    <string name="update_latest_title">Up to date</string>
    <string name="update_latest">You already run the latest version (%1$s)</string>
    <string name="update_available_title">Update available</string>
    <string name="update_available">A new version (%1$s) is available. Download now?</string>
    <string name="update_download">Download</string>
    <string name="update_error_title">Update error</string>
    <string name="update_error_fetch">Unable to fetch remote version</string>
    <string name="update_downloading">Downloading APKâ€¦</string>
    <string name="update_parse_error_fallback">The downloaded file seems invalid. Open the browser to download and install manually?</string>
    <string name="update_open_browser">Open browser</string>


    <!-- Nouveau -->
    <string name="menu_modules">Modules</string>
    <string name="menu_settings">Settings</string>

    <string name="pref_autoscroll_title">Log Auto-scroll</string>
    <string name="pref_autoscroll_on">The log scrolls automatically to the bottom</string>
    <string name="pref_autoscroll_off">The log no longer scrolls automatically</string>

    <string name="select_module">Select Module</string>
    <string name="bluetooth_devices">Bluetooth Devices</string>

    <string name="pref_title_theme">Theme</string>
    <string name="pref_title_language">Language</string>
    <string name="pref_title_autoscroll">Auto-scroll logs</string>
    <string name="pref_title_vehicle_editor">Vehicle Editor</string>
    <string name="pref_title_update">Check for Updates</string>
    <string name="pref_version_summary">App Version</string>

    <string-array name="theme_entries">
        <item>System Default</item>
        <item>Light</item>
        <item>Dark</item>
    </string-array>
    <string-array name="theme_values">
        <item>system</item>
        <item>light</item>
        <item>dark</item>
    </string-array>

    <string-array name="lang_entries">
        <item>English</item>
        <item>French</item>
    </string-array>
    <string-array name="lang_values">
        <item>en</item>
        <item>fr</item>
    </string-array>

    <!-- Update -->
    <string name="update_title">Update Available</string>
    <string name="update_message">A new version %1$s is available. Do you want to install it?</string>
    <string name="update_error_check">âŒ Failed to check for update.</string>
    <string name="update_download_failed">âŒ Download failed.</string>
    <string name="update_open_browser_failed">âŒ Could not open installer. Try manually via browser.</string>
    <string name="update_latest_version">âœ… You already have the latest version (%1$s).</string>

    <string name="category_settings">Settings</string>
    <string name="category_update">Update</string>
    <string name="setting_check_update">Check for update</string>
    <string name="setting_check_update_summary">Verify if a newer version is available</string>
    <string name="setting_current_version">Current version</string>
    <string name="settings_vehicle_editor_summary">Add or edit supported vehicles</string>
    <string name="settings_category_general">General</string>
    <string name="settings_category_app">Application</string>
    <string name="permission_bt_required">Bluetooth access permission is required. Please enable it in the settings.</string>
    <string name="enable_location">Please enable location services to detect Bluetooth devices.</string>
    <string name="permission_denied">Some permissions were denied. The app may not function correctly.</string>
    <string name="button_cancel">Cancel</string>
    <string name="button_disconnect">Disconnect</string>
    <string name="select_brand">Select a brand</string>
    <string name="select_model">Select a model</string>
    <string name="select_year">Select a year</string>
    <string name="vehicle_selected">%1$s %2$s %3$d selected</string>
    <string name="usb_can_connected">âœ… Simulated USB CAN connected</string>
    <string name="usb_can_disconnected">ðŸ›‘ Simulated USB CAN disconnected</string>
    <string name="usb_can_send">ðŸ§ª [Simulated CAN] Sending: %1$s</string>
    <string name="usb_can_listen_started">ðŸ‘‚ Simulated CAN listening started</string>
    <string name="requesting_vin_dtc">Request VIN and DTC sendâ€¦</string>


</resources>

--- Fichier : mobile\src\main\res\values-fr\strings.xml ---

<resources >
    <!-- Application -->
    <string name="app_name">PSA Immo Tool</string>

    <!-- Menus -->
    <string name="menu_vehicle">VÃ©hicule</string>
    <string name="menu_theme">ThÃ¨me</string>
    <string name="menu_language">Langue</string>
    <string name="menu_quit">Quitter</string>
    <string name="menu_vehicle_editor">Ã‰diteur de vÃ©hicule</string>
    <string name="theme_light">Clair</string>
    <string name="theme_dark">Sombre</string>
    <string name="lang_fr">FranÃ§ais</string>
    <string name="lang_en">Anglais</string>

    <!-- Marques -->
    <string name="brand_peugeot">Peugeot</string>
    <string name="brand_ford">Ford</string>
    <string name="brand_mg">MG</string>
    <string name="brand_ducati">Ducati</string>
    <string name="brand_toyota">Toyota</string>

    <!-- ModÃ¨les -->
    <string name="model_207">207</string>
    <string name="model_307">307</string>
    <string name="model_mustang_mache">Mustang Mach-E</string>
    <string name="model_mustang_series">Mustang (2000+)</string>
    <string name="model_kuga">Kuga</string>
    <string name="model_puma">Puma</string>
    <string name="model_fiesta">Fiesta</string>
    <string name="model_3">3</string>
    <string name="model_4">4</string>
    <string name="model_marvel_r">Marvel R</string>
    <string name="model_848">848</string>
    <string name="model_1098">1098</string>
    <string name="model_1198">1198</string>
    <string name="model_corolla">Corolla</string>

    <!-- Log et statut -->
    <string name="logs_cleared">ðŸ§¹ Logs effacÃ©s</string>
    <string name="storage_permission_required">ðŸ“› Autorisation de stockage requise pour exporter les logs</string>
    <string name="log_saved_success">ðŸ“ Log enregistrÃ© dans : %1$s</string>
    <string name="log_saved_error">âŒ Erreur lors de l\'enregistrement du log : %1$s</string>

    <!-- Rapport -->
    <string name="report_header">ðŸ§¾ Rapport de diagnostic</string>
    <string name="report_date">Date :</string>
    <string name="report_vehicle">VÃ©hicule</string>
    <string name="report_module">Module :</string>
    <string name="report_connection">Connexion :</string>
    <string name="report_pid_section">ðŸ“Š DonnÃ©es PID :</string>
    <string name="report_dtc_section">ðŸ’¥ Codes dÃ©fauts :</string>
    <string name="report_logs_section">ðŸ“œ Logs :</string>
    <string name="report_saved">ðŸ’¾ Rapport sauvegardÃ© : %1$s</string>
    <string name="report_error">âŒ Erreur lors de la sauvegarde du rapport : %1$s</string>
    <string name="module_unknown">Inconnu</string>
    <string name="connection_success">Connexion rÃ©ussie</string>
    <string name="connection_failed">Connexion Ã©chouÃ©e</string>

    <!-- FrameInterpreter -->
    <string name="vin_received">ðŸ” VIN : %1$s</string>
    <string name="pin_received">ðŸ”‘ Code PIN : %1$s</string>
    <string name="voltage_read">ðŸ”‹ Tension batterie : %1$.1f V</string>
    <string name="temperature_read">ðŸŒ¡ TempÃ©rature moteur : %1$d Â°C</string>
    <string name="dtc_found">ðŸ’¥ Codes dÃ©fauts : %1$s</string>
    <string name="seed_received">ðŸ§¬ Seed reÃ§u : %1$s</string>
    <string name="unknown_frame_response">â” Trame reÃ§ue mais non interprÃ©tÃ©e</string>

    <!-- Modules -->
    <string name="module_obd2_usb">OBD2 (USB)</string>
    <string name="module_obd2_bluetooth">OBD2 (Bluetooth)</string>
    <string name="module_kline_usb">K-Line (USB)</string>
    <string name="module_canbus">CANBUS (USB)</string>
    <string name="module_canbus_uart">CANBUS (UART)</string>
    <string name="module_can_demo">CANBUS (DÃ©mo)</string>

    <!-- activity_main -->
    <string name="label_module">Module :</string>
    <string name="label_bluetooth_device">Appareil Bluetooth :</string>
    <string name="label_input_frame">Trame personnalisÃ©e :</string>
    <string name="button_connect">Connecter</string>
    <string name="button_request_vin">Lire VIN</string>
    <string name="button_request_pin">Lire Code PIN</string>
    <string name="button_start_can_listen">Ã‰couter CAN</string>
    <string name="button_send_frame">Envoyer</string>
    <string name="button_export_logs">Exporter Logs</string>
    <string name="button_clear_logs">Effacer</string>
    <string name="button_generate_report">GÃ©nÃ©rer Rapport</string>
    <string name="status_disconnected">DÃ©connectÃ©</string>
    <string name="status_connected">ConnectÃ©</string>
    <string name="no_bluetooth_device">âš ï¸ Aucun pÃ©riphÃ©rique Bluetooth sÃ©lectionnÃ©</string>
    <string name="connected_to">ðŸ”— ConnectÃ© Ã  %1$s</string>
    <string name="connection_failed_bt">âŒ Connexion Bluetooth Ã©chouÃ©e</string>
    <string name="no_module_connected">âŒ Aucun module connectÃ©</string>
    <string name="error_sending_frame">âŒ Erreur lors de l\'envoi de la trame</string>
    <string name="start_listening_not_applicable">âš ï¸ Ce module ne supporte pas l\'Ã©coute CAN</string>
    <string name="usb_connection_failed">âŒ Connexion USB Ã©chouÃ©e</string>
    <string name="frame_sent">âž¡ï¸ Trame envoyÃ©e : %1$s</string>
    <string name="frame_received">â¬…ï¸ Trame reÃ§ue : %1$s</string>
    <string name="frame_decoded">âœ… Trame dÃ©codÃ©e : %1$s</string>
    <string name="no_usb_found">âš ï¸ Aucun pÃ©riphÃ©rique USB dÃ©tectÃ©</string>
    <string name="error_usb_permission">âŒ Autorisation USB refusÃ©e</string>
    <string name="can_connected">ðŸ”Œ CAN connectÃ©</string>
    <string name="can_disconnected">âŒ CAN dÃ©connectÃ©</string>
    <string name="can_listening_started">ðŸŽ§ Ã‰coute CAN dÃ©marrÃ©e</string>
    <string name="pin_step_session">ðŸ” Initialisation de la session de sÃ©curitÃ©â€¦</string>
    <string name="pin_step_seed_received">ðŸ§¬ Seed reÃ§u : %1$s</string>
    <string name="pin_step_key_sent">ðŸ”‘ ClÃ© envoyÃ©e : %1$s</string>
    <string name="pin_step_unlocked">ðŸ”“ AccÃ¨s sÃ©curisÃ© activÃ©</string>
    <string name="pin_step_no_key_algo">âŒ Aucun algorithme de calcul de clÃ© disponible pour ce vÃ©hicule</string>
    <string name="select_vehicle">SÃ©lectionner un vÃ©hicule</string>
    <string name="report_capabilities">CapacitÃ©s :</string>
    <string name="report_modules">Modules compatibles :</string>
    <string name="no_key_algo_for_vehicle">Aucun algorithme de clÃ© PIN n\'est connu pour le vÃ©hicule sÃ©lectionnÃ©</string>
    <string name="pin_algo_present">Algorithme clÃ© PIN : âœ… oui</string>
    <string name="pin_algo_absent">Algorithme clÃ© PIN : âŒ non</string>
    <string name="report_seed_received">Dernier seed reÃ§u : %1$s</string>
    <string name="report_key_calculated">ClÃ© calculÃ©e : %1$s</string>

    <!-- Vehicle Editor -->
    <string name="label_brand">Marque (ex: Peugeot)</string>
    <string name="label_model">ModÃ¨le (ex: 207)</string>
    <string name="label_year">AnnÃ©e (ex: 2008)</string>
    <string name="label_app_key">AppKey (ex: D91C)</string>
    <string name="btn_save_vehicle">Sauvegarder</string>
    <string name="vehicle_saved">VÃ©hicule %1$s %2$s %3$d enregistrÃ© avec succÃ¨s</string>
    <string name="invalid_vehicle_data">Veuillez remplir tous les champs correctement</string>
    <string name="simulated_frame_received">Trame simulÃ©e reÃ§ue : %1$s</string>
    <string name="hint_input_frame">Entrer une trame CAN/OBD2 personnalisÃ©e</string>
    <string name="capabilities_label">CapacitÃ©s disponibles :</string>
    <string name="label_can">CAN</string>
    <string name="label_obd2">OBD2</string>
    <string name="label_kline">K-Line</string>
    <string name="add_module_label">Ajouter un module compatible :</string>
    <string name="btn_add_module">Ajouter module</string>
    <string name="bluetooth_not_supported">âŒ Bluetooth non pris en charge sur cet appareil</string>
    <string name="no_paired_bt_devices">âš ï¸ Aucun appareil Bluetooth appairÃ© trouvÃ©</string>
    <string name="unknown_device">Appareil inconnu</string>
    <string name="bluetooth_scanning">ðŸ” Recherche de pÃ©riphÃ©riques Bluetoothâ€¦</string>
    <string name="bt_discovery_started">Recherche des pÃ©riphÃ©riques Bluetooth en coursâ€¦</string>
    <string name="bt_discovery_finished">Recherche Bluetooth terminÃ©e.</string>

    <string name="menu_update">Mise Ã  jour</string>

    <string name="update_current_version">Version actuelle : %1$s</string>
    <string name="update_check">VÃ©rifier en ligne</string>
    <string name="update_checking">VÃ©rification de nouvelle versionâ€¦</string>
    <string name="update_got_version">Version distante : %1$s</string>
    <string name="update_latest_title">Ã€ jour</string>
    <string name="update_latest">Vous utilisez dÃ©jÃ  la derniÃ¨re version (%1$s)</string>
    <string name="update_available_title">Mise Ã  jour disponible</string>
    <string name="update_available">Une nouvelle version (%1$s) est disponible. TÃ©lÃ©charger maintenant ?</string>
    <string name="update_download">TÃ©lÃ©charger</string>
    <string name="update_error_title">Erreur de mise Ã  jour</string>
    <string name="update_error_fetch">Impossible de rÃ©cupÃ©rer la version distante</string>
    <string name="update_downloading">TÃ©lÃ©chargement de lâ€™APKâ€¦</string>
    <string name="update_parse_error_fallback">Le fichier tÃ©lÃ©chargÃ© semble invalide. Voulez-vous ouvrir le navigateur pour le tÃ©lÃ©charger manuellementÂ ?</string>
    <string name="update_open_browser">Ouvrir le navigateur</string>


    <!-- Nouveau -->
    <string name="menu_modules">Modules</string>
    <string name="menu_settings">Settings</string>

    <string name="pref_autoscroll_title">Auto-scroll des logs</string>
    <string name="pref_autoscroll_on">Le log dÃ©file automatiquement jusqu\'en bas</string>
    <string name="pref_autoscroll_off">Le log ne dÃ©file plus automatiquement</string>
    <string name="select_module">SÃ©lectionner un module</string>
    <string name="bluetooth_devices">PÃ©riphÃ©riques Bluetooth</string>



    <string name="pref_title_theme">ThÃ¨me</string>
    <string name="pref_title_language">Langue</string>
    <string name="pref_title_autoscroll">DÃ©filement automatique des journaux</string>
    <string name="pref_title_vehicle_editor">Ã‰diteur de vÃ©hicules</string>
    <string name="pref_title_update">VÃ©rifier les mises Ã  jour</string>
    <string name="pref_version_summary">Version de lâ€™application</string>

    <string-array name="theme_entries">
        <item>SystÃ¨me par dÃ©faut</item>
        <item>Clair</item>
        <item>Sombre</item>
    </string-array>
    <string-array name="theme_values">
        <item>system</item>
        <item>light</item>
        <item>dark</item>
    </string-array>

    <string-array name="lang_entries">
        <item>Anglais</item>
        <item>FranÃ§ais</item>
    </string-array>
    <string-array name="lang_values">
        <item>en</item>
        <item>fr</item>
    </string-array>

    <!-- Mise Ã  jour -->
    <string name="update_title">Mise Ã  jour disponible</string>
    <string name="update_message">Une nouvelle version %1$s est disponible. Voulez-vous lâ€™installer ?</string>
    <string name="update_error_check">âŒ Ã‰chec de la vÃ©rification de mise Ã  jour.</string>
    <string name="update_download_failed">âŒ Le tÃ©lÃ©chargement a Ã©chouÃ©.</string>
    <string name="update_open_browser_failed">âŒ Impossible dâ€™ouvrir lâ€™installateur. Essayez avec le navigateur.</string>
    <string name="update_latest_version">âœ… Vous avez dÃ©jÃ  la derniÃ¨re version (%1$s).</string>

    <string name="category_settings">ParamÃ¨tres</string>
    <string name="category_update">Mise Ã  jour</string>
    <string name="setting_check_update">VÃ©rifier les mises Ã  jour</string>
    <string name="setting_check_update_summary">VÃ©rifie si une nouvelle version est disponible</string>
    <string name="setting_current_version">Version actuelle</string>
    <string name="settings_vehicle_editor_summary">Ajouter ou modifier les vÃ©hicules pris en charge</string>
    <string name="settings_category_general">GÃ©nÃ©ral</string>
    <string name="settings_category_app">Application</string>
    <string name="permission_bt_required">Le Bluetooth nÃ©cessite l\'autorisation d\'accÃ¨s. Activez-la dans les paramÃ¨tres.</string>
    <string name="enable_location">Veuillez activer la localisation pour dÃ©tecter les pÃ©riphÃ©riques Bluetooth.</string>
    <string name="permission_denied">Certaines autorisations ont Ã©tÃ© refusÃ©es. L\'application pourrait ne pas fonctionner correctement.</string>
    <string name="button_cancel">Annuler</string>
    <string name="button_disconnect">DÃ©connecter</string>
    <string name="select_brand">SÃ©lectionnez une marque</string>
    <string name="select_model">SÃ©lectionnez un modÃ¨le</string>
    <string name="select_year">SÃ©lectionnez une annÃ©e</string>
    <string name="vehicle_selected">%1$s %2$s %3$d sÃ©lectionnÃ©</string>

    <!-- Messages USB CAN simulÃ© -->
    <string name="usb_can_connected">âœ… USB CAN simulÃ© connectÃ©</string>
    <string name="usb_can_disconnected">ðŸ›‘ USB CAN simulÃ© dÃ©connectÃ©</string>
    <string name="usb_can_send">ðŸ§ª [CAN SimulÃ©] Envoi : %1$s</string>
    <string name="usb_can_listen_started">ðŸ‘‚ Ã‰coute CAN simulÃ©e dÃ©marrÃ©e</string>
    <string name="requesting_vin_dtc">RequÃªte VIN &amp; DTC envoyÃ©esâ€¦</string>
</resources>





--- Fichier : mobile\src\main\res\values-night\colors.xml ---

<resources>
    <color name="purple_200">#BB86FC</color>
    <color name="white">#FFFFFF</color>
    <color name="black">#000000</color>
    <color name="purple_500">#3F3D56</color> <!-- un violet/gris plus doux -->
    <color name="purple_700">#2C2A40</color> <!-- variante sombre -->
    <color name="teal_200">#03DAC5</color>
</resources>

--- Fichier : mobile\src\main\res\values-night\themes.xml ---

<resources>
    <style name="Theme.PsaImmTool" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <item name="android:statusBarColor">@color/purple_700</item>
        <item name="android:windowTranslucentStatus">false</item>
        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
    </style>
    <style name="Theme.PsaImmoTool" parent="Theme.Material3.DayNight.NoActionBar">
        <item name="colorPrimary">@color/purple_200</item>
        <item name="colorOnPrimary">@color/black</item>
        <item name="colorSurface">@color/black</item>
        <item name="colorOnSurface">@color/white</item>
        <item name="android:statusBarColor">@color/purple_500</item>
        <item name="android:navigationBarColor">@color/purple_500</item>
        <item name="android:windowLightStatusBar">true</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
    </style>

</resources>

--- Fichier : mobile\src\main\res\xml\file_paths.xml ---

<?xml version="1.0" encoding="utf-8"?>
<paths>
    <external-files-path
        name="external_files"
        path="." />
</paths>

--- Fichier : mobile\src\main\res\xml\prefs.xml ---


<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">

<PreferenceCategory android:title="@string/settings_category_general">
    <SwitchPreferenceCompat
        android:key="auto_scroll_enabled"
        android:title="@string/pref_autoscroll_title"
        android:defaultValue="true" />
</PreferenceCategory>

<PreferenceCategory android:title="@string/settings_category_app">
    <Preference
        android:key="vehicle_editor"
        android:title="@string/pref_title_vehicle_editor"
        android:summary="@string/settings_vehicle_editor_summary" />

</PreferenceCategory>
    <PreferenceCategory android:title="@string/pref_title_theme">
        <ListPreference
            android:key="theme_selector"
            android:title="@string/pref_title_theme"
            android:entries="@array/theme_entries"
            android:entryValues="@array/theme_values"
            android:defaultValue="light"
            android:summary="%s" />
    </PreferenceCategory>
    <PreferenceCategory android:title="@string/pref_title_language">
        <ListPreference
            android:key="language_selector"
            android:title="@string/pref_title_language"
            android:entries="@array/lang_entries"
            android:entryValues="@array/lang_values"
            android:defaultValue="fr"
            android:summary="%s" />
    </PreferenceCategory>

<PreferenceCategory android:title="@string/category_update">
    <Preference
        android:key="pref_check_update"
        android:title="@string/pref_title_update"
        android:summary="@string/setting_check_update_summary" />

    <Preference
        android:key="pref_version"
        android:title="@string/pref_version_summary"
        android:summary="..." />
</PreferenceCategory>

</PreferenceScreen>
